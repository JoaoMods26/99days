-- ╔══════════════════════════════════════════════════════╗
-- ║  🌙 HUB 99 NOCHES EN EL BOSQUE - JMODSLIB V2.0     ║
-- ║  Adaptado para JmodsLib por joao_mods              ║
-- ╚══════════════════════════════════════════════════════╝

-- ⚡ Cargar JmodsLib
local JmodsLib = loadstring(game:HttpGet('https://raw.githubusercontent.com/pruebasjoao/test/refs/heads/main/JmodsLibV1.0'))()

-- 🎮 Servicios de Roblox
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Lighting = game:GetService("Lighting")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- 📊 Variables globales
local connections = {}
local espObjects = {}

-- Estados de funciones
local noclipEnabled = false
local autoFarmEnabled = false
local flyEnabled = false
local infiniteJumpEnabled = false
local antiAFKEnabled = false
local fullbrightEnabled = false
local wallHackEnabled = false
local autoClickEnabled = false

-- Configuración
local flySpeed = 50
local originalWalkSpeed = humanoid.WalkSpeed or 16
local originalJumpPower = humanoid.JumpPower or 50
local originalAmbient = Lighting.Ambient
local originalBrightness = Lighting.Brightness
local originalOutdoorAmbient = Lighting.OutdoorAmbient

-- 🪟 Crear ventana principal
local Window = JmodsLib:CreateWindow({
    Name = "J99",
    Icon = 128308831323216,
    LoadingTitle = "Cargando Jmods 99",
    LoadingSubtitle = "Preparando funciones...",
    Theme = "oscuro neon",
    Intro = true,   
    IntroIcon = 128308831323216,
    AnimationIntro = 0,
    DragImage = 127271155083726
})

-- ═══════════════════════════════════════════════════════
-- 📦 FUNCIONES PRINCIPALES
-- ═══════════════════════════════════════════════════════

-- 🔧 Sistema de notificaciones personalizado
local function notify(title, content, duration)
    JmodsLib:Notify({
        Title = title,
        Content = content,
        Duration = duration or 3
    })
end

-- 🎯 Obtener parte del item
local function getItemPart(item)
    if item:IsA("Model") then
        return item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
    elseif item:IsA("BasePart") then
        return item
    end
    return nil
end

-- 🚀 FUNCIÓN: Toggle Fly
local function toggleFly(state)
    flyEnabled = state
    
    if flyEnabled then
        if connections.fly then
            connections.fly:Disconnect()
        end
        
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            flyEnabled = false
            notify("❌ Error", "Personaje no encontrado", 2)
            return
        end
        
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.Parent = character.HumanoidRootPart
        
        connections.fly = RunService.Heartbeat:Connect(function()
            if not flyEnabled or not character or not character:FindFirstChild("HumanoidRootPart") then
                if bodyVelocity then bodyVelocity:Destroy() end
                return
            end
            
            local camera = workspace.CurrentCamera
            local moveVector = Vector3.new(0, 0, 0)
            
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                moveVector = moveVector + camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                moveVector = moveVector - camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                moveVector = moveVector - camera.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                moveVector = moveVector + camera.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                moveVector = moveVector + Vector3.new(0, 1, 0)
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                moveVector = moveVector - Vector3.new(0, 1, 0)
            end
            
            if bodyVelocity and bodyVelocity.Parent then
                bodyVelocity.Velocity = moveVector * flySpeed
            end
        end)
        
        notify("✅ Vuelo Activado", "WASD: mover | Space/Shift: subir/bajar", 3)
    else
        if connections.fly then
            connections.fly:Disconnect()
            connections.fly = nil
        end
        
        if character and character:FindFirstChild("HumanoidRootPart") then
            local bodyVelocity = character.HumanoidRootPart:FindFirstChild("BodyVelocity")
            if bodyVelocity then
                bodyVelocity:Destroy()
            end
        end
        
        notify("❌ Vuelo Desactivado", "Modo vuelo deshabilitado", 2)
    end
end

-- 🚶 FUNCIÓN: Toggle Noclip
local function toggleNoclip(state)
    noclipEnabled = state
    
    if noclipEnabled then
        if connections.noclip then
            connections.noclip:Disconnect()
        end
        
        connections.noclip = RunService.Stepped:Connect(function()
            if noclipEnabled and character then
                for _, part in pairs(character:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
        
        notify("✅ Noclip Activado", "Atraviesa paredes", 2)
    else
        if connections.noclip then
            connections.noclip:Disconnect()
            connections.noclip = nil
        end
        
        if character then
            for _, part in pairs(character:GetChildren()) do
                if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                    part.CanCollide = true
                end
            end
        end
        
        notify("❌ Noclip Desactivado", "Colisiones restauradas", 2)
    end
end

-- 🌟 FUNCIÓN: Toggle Salto Infinito
local function toggleInfiniteJump(state)
    infiniteJumpEnabled = state
    
    if infiniteJumpEnabled then
        if connections.infJump then
            connections.infJump:Disconnect()
        end
        
        connections.infJump = UserInputService.JumpRequest:Connect(function()
            if infiniteJumpEnabled and character and character:FindFirstChild("Humanoid") then
                character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
        
        notify("✅ Salto Infinito", "Salta sin límites", 2)
    else
        if connections.infJump then
            connections.infJump:Disconnect()
            connections.infJump = nil
        end
        
        notify("❌ Salto Desactivado", "Salto normal", 2)
    end
end

-- 💡 FUNCIÓN: Toggle Fullbright
local function toggleFullbright(state)
    fullbrightEnabled = state
    
    if fullbrightEnabled then
        Lighting.Ambient = Color3.fromRGB(255, 255, 255)
        Lighting.Brightness = 2
        Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
        Lighting.GlobalShadows = false
        
        notify("✅ Fullbright ON", "Máxima iluminación", 2)
    else
        Lighting.Ambient = originalAmbient
        Lighting.Brightness = originalBrightness
        Lighting.OutdoorAmbient = originalOutdoorAmbient
        Lighting.GlobalShadows = true
        
        notify("❌ Fullbright OFF", "Iluminación normal", 2)
    end
end

-- 🧱 FUNCIÓN: Toggle Wallhack
local function toggleWallhack(state)
    wallHackEnabled = state
    
    if wallHackEnabled then
        if connections.wallhack then
            task.cancel(connections.wallhack)
        end
        
        connections.wallhack = task.spawn(function()
            while wallHackEnabled do
                for _, obj in pairs(workspace:GetDescendants()) do
                    if obj:IsA("BasePart") and (obj.Name:match("Wall") or obj.Name:match("Door")) then
                        obj.Transparency = 0.8
                        obj.CanCollide = false
                    end
                end
                task.wait(1)
            end
        end)
        
        notify("✅ Wallhack ON", "Paredes transparentes", 2)
    else
        if connections.wallhack then
            task.cancel(connections.wallhack)
            connections.wallhack = nil
        end
        
        for _, obj in pairs(workspace:GetDescendants()) do
            if obj:IsA("BasePart") and (obj.Name:match("Wall") or obj.Name:match("Door")) then
                obj.Transparency = 0
                obj.CanCollide = true
            end
        end
        
        notify("❌ Wallhack OFF", "Paredes normales", 2)
    end
end

-- 🖱️ FUNCIÓN: Toggle Auto-Click
local function toggleAutoClick(state)
    autoClickEnabled = state
    
    if autoClickEnabled then
        if connections.autoClick then
            task.cancel(connections.autoClick)
        end
        
        connections.autoClick = task.spawn(function()
            while autoClickEnabled do
                task.wait(0.05)
                if autoClickEnabled then
                    mouse1click()
                end
            end
        end)
        
        notify("✅ Auto-Click ON", "Click automático activado", 2)
    else
        if connections.autoClick then
            task.cancel(connections.autoClick)
            connections.autoClick = nil
        end
        
        notify("❌ Auto-Click OFF", "Click manual", 2)
    end
end

-- 💤 FUNCIÓN: Toggle Anti-AFK
local function toggleAntiAFK(state)
    antiAFKEnabled = state
    
    if antiAFKEnabled then
        if connections.antiAFK then
            task.cancel(connections.antiAFK)
        end
        
        connections.antiAFK = task.spawn(function()
            while antiAFKEnabled do
                task.wait(math.random(300, 600))
                if antiAFKEnabled and character and character:FindFirstChild("HumanoidRootPart") then
                    local currentPos = character.HumanoidRootPart.CFrame
                    character.HumanoidRootPart.CFrame = currentPos + Vector3.new(0, 0.1, 0)
                    task.wait(0.1)
                    character.HumanoidRootPart.CFrame = currentPos
                end
            end
        end)
        
        notify("✅ Anti-AFK ON", "No serás expulsado", 2)
    else
        if connections.antiAFK then
            task.cancel(connections.antiAFK)
            connections.antiAFK = nil
        end
        
        notify("❌ Anti-AFK OFF", "Anti-AFK desactivado", 2)
    end
end

-- 📦 FUNCIÓN: Auto Collect Items
local function autoCollectItems()
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        notify("❌ Error", "Personaje no encontrado", 2)
        return
    end
    
    local root = character.HumanoidRootPart
    local itemsFolder = workspace:FindFirstChild("Items")
    if not itemsFolder then
        notify("❌ Error", "Carpeta 'Items' no encontrada", 2)
        return
    end
    
    local itemsCollected = 0
    for _, item in ipairs(itemsFolder:GetChildren()) do
        if item:IsA("Model") or item:IsA("BasePart") then
            local part = getItemPart(item)
            if part and (part.Position - root.Position).Magnitude <= 50 then
                part.CFrame = root.CFrame
                itemsCollected = itemsCollected + 1
            end
        end
    end
    
    notify("✅ Items Recolectados", "Total: " .. itemsCollected, 2)
end

-- 🔄 FUNCIÓN: Toggle Auto-Farm
local function toggleAutoFarm(state)
    autoFarmEnabled = state
    
    if autoFarmEnabled then
        if connections.autoFarm then
            task.cancel(connections.autoFarm)
        end
        
        connections.autoFarm = task.spawn(function()
            while autoFarmEnabled do
                autoCollectItems()
                task.wait(1)
            end
        end)
        
        notify("✅ Auto-Farm ON", "Recolección automática activa", 2)
    else
        if connections.autoFarm then
            task.cancel(connections.autoFarm)
            connections.autoFarm = nil
        end
        
        notify("❌ Auto-Farm OFF", "Recolección manual", 2)
    end
end

-- 👁️ FUNCIÓN: Crear ESP
local function createESP(obj, color, text)
    if espObjects[obj] then return end
    
    local part = getItemPart(obj)
    if not part then return end
    
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP_" .. obj.Name
    billboard.Adornee = part
    billboard.Size = UDim2.new(0, 120, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true -- 🔥 Hace visible el ESP aunque haya objetos enfrente
    billboard.MaxDistance = 10000 -- Opcional: visible a distancia larga
    billboard.Parent = part
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.BackgroundColor3 = color or Color3.fromRGB(255, 255, 0)
    frame.BackgroundTransparency = 0.3
    frame.Parent = billboard
    Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 6)
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.Text = text or obj.Name
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextStrokeTransparency = 0
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.GothamBold
    label.TextScaled = true
    label.Parent = frame
    
    espObjects[obj] = billboard
end


local function removeESP(obj)
    if espObjects[obj] then
        espObjects[obj]:Destroy()
        espObjects[obj] = nil
    end
end

-- 📦 FUNCIÓN: Traer items específicos
local function bringSpecificItems(itemName)
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        notify("❌ Error", "Personaje no encontrado", 2)
        return
    end
    
    local root = character.HumanoidRootPart
    local itemsFolder = workspace:FindFirstChild("Items")
    if not itemsFolder then
        notify("❌ Error", "Carpeta 'Items' no encontrada", 2)
        return
    end
    
    local targetName = itemName:lower()
    local itemsBrought = 0
    
    for _, obj in ipairs(itemsFolder:GetChildren()) do
        if obj.Name:lower() == targetName then
            local part = getItemPart(obj)
            if part then
                part.CFrame = root.CFrame + Vector3.new(math.random(-5,5), 5, math.random(-5,5))
                itemsBrought = itemsBrought + 1
            end
        end
    end
    
    notify("✅ Items Traídos", "'" .. itemName .. "': " .. itemsBrought, 2)
end

-- 📍 FUNCIÓN: Teletransporte a item
local function teleportToItem(item)
    if not item or not item:IsDescendantOf(workspace) then
        notify("❌ Error", "Item no válido", 2)
        return
    end
    
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        notify("❌ Error", "Personaje no encontrado", 2)
        return
    end
    
    local part = getItemPart(item)
    if part then
        character.HumanoidRootPart.CFrame = part.CFrame + Vector3.new(0, 5, 0)
        notify("✅ Teletransporte", "A: " .. item.Name, 2)
    end
end

-- ═══════════════════════════════════════════════════════
-- 🎨 CREAR TABS DE LA INTERFAZ
-- ═══════════════════════════════════════════════════════

-- 📑 TAB: PRINCIPAL
local MainTab = Window:CreateTab("🏠 Principal")

MainTab:CreateSection("📋 Información del Hub")

MainTab:CreateParagraph({
    Title = "Hub de 99 Noches en el Bosque",
    Content = "Creado por joao_mods con JmodsLib.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
})

MainTab:CreateButton({
    Name = "🎥 Visitar Canal de YouTube",
    Callback = function()
        notify("📺 YouTube", "Enlace copiado. Suscríbete: @joao_mods0", 5)
        if setclipboard then
            setclipboard("https://youtube.com/@joao_mods0")
        end
    end
})

MainTab:CreateSection("⚡ Acciones Rápidas")

MainTab:CreateButton({
    Name = "📦 Recolectar Items Cercanos",
    Callback = function()
        autoCollectItems()
    end
})

MainTab:CreateButton({
    Name = "📍 Ir al Spawn",
    Callback = function()
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            notify("❌ Error", "Personaje no encontrado", 2)
            return
        end
        
        local spawnPoint = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("SpawnLocation")
        if spawnPoint then
            character.HumanoidRootPart.CFrame = spawnPoint.CFrame + Vector3.new(0, 5, 0)
            notify("✅ Teletransporte", "Al spawn", 2)
        else
            character.HumanoidRootPart.CFrame = CFrame.new(0, 50, 0)
            notify("✅ Teletransporte", "Al spawn (coords alternativas)", 2)
        end
    end
})

MainTab:CreateButton({
    Name = "⚡ Abrir Cofres Rápido",
    Callback = function()
        for i,v in pairs(workspace:GetDescendants()) do
            if v:IsA("ProximityPrompt") then
                v.HoldDuration = 0
            end
        end
        
        game:GetService("ProximityPromptService").PromptButtonHoldBegan:Connect(function(v)
            v.HoldDuration = 0
        end)
        
        notify("✅ Cofres Rápidos", "Ahora se abren instantáneamente", 3)
    end
})

-- ═══════════════════════════════════════════════════════
-- 🌍 TOGGLE: DESBLOQUEAR TODO EL MAPA (AUTO DESACTIVACIÓN + VELOCIDAD AJUSTADA)
-- ═══════════════════════════════════════════════════════

local unlockingMap = false
local originalCFrame = nil
local unlockThread = nil

MainTab:CreateToggle({
    Name = "🌍 Mapa",
    CurrentValue = false,
    Callback = function(state)
        unlockingMap = state

        if unlockingMap then
            -- Guardar posición original del jugador
            if character and character:FindFirstChild("HumanoidRootPart") then
                originalCFrame = character.HumanoidRootPart.CFrame
            else
                notify("❌ Error", "Personaje no encontrado", 2)
                unlockingMap = false
                return
            end

            -- Obtener punto central del mapa (Spawn)
            local centerPos
            local map = workspace:FindFirstChild("Map")
            if map and map:FindFirstChild("SpawnLocation") then
                centerPos = map.SpawnLocation.Position
            else
                centerPos = Vector3.new(0, 0, 0)
            end


            -- Movimiento circular con radio creciente
            unlockThread = task.spawn(function()
                local root = character:WaitForChild("HumanoidRootPart")
                local angle = 0
                local radius = 150
                local height = 200
                local angularSpeed = 0.9     -- 🔹 Giro más controlado
                local radiusGrowth = 0.9      -- 🔹 Expansión más suave

                local startTime = tick()
                while unlockingMap and root do
                    -- Si pasaron 30 segundos → se detiene solo
                    if tick() - startTime >= 55 then
                        unlockingMap = false
                        break
                    end

                    -- Calcular posición circular
                    local x = centerPos.X + math.cos(angle) * radius
                    local z = centerPos.Z + math.sin(angle) * radius
                    local y = centerPos.Y + height

                    -- Mover con CFrame (mirando hacia el centro)
                    root.CFrame = CFrame.new(Vector3.new(x, y, z), centerPos)

                    -- Incrementos suaves
                    angle += angularSpeed
                    radius += radiusGrowth

                    task.wait(0.03) -- 🔹 Un poco más lento y estable
                end

                -- Auto-desactivación y retorno
                if originalCFrame and character and character:FindFirstChild("HumanoidRootPart") then
                    character.HumanoidRootPart.CFrame = originalCFrame
                    notify("✅ Desbloqueo Completado", "Exploración finalizada automáticamente", 3)
                end
            end)
        else
            -- Manualmente desactivado
            if unlockThread then
                task.cancel(unlockThread)
                unlockThread = nil
            end

            if originalCFrame and character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = originalCFrame
                notify("✅ Desbloqueo Finalizado", "Mapa recorrido completamente", 3)
            else
                notify("⚠️ Aviso", "No se pudo regresar a la posición original", 2)
            end
        end
    end
})



MainTab:CreateToggle({
    Name = "🖱️ Auto-Click",
    CurrentValue = false,
    Callback = function(state)
        toggleAutoClick(state)
    end
})


-- 🎮 TAB: JUGADOR
local PlayerTab = Window:CreateTab("🎮 Jugador")

PlayerTab:CreateSection("⚙️ Modificadores del Jugador")

PlayerTab:CreateSlider({
    Name = "🏃 Velocidad de Caminata",
    Range = {16, 200},
    Increment = 1,
    Suffix = " studs/s",
    CurrentValue = originalWalkSpeed,
    Callback = function(value)
        if humanoid then
            humanoid.WalkSpeed = value
        end
    end
})

PlayerTab:CreateToggle({
    Name = "🌟 Salto Infinito",
    CurrentValue = false,
    Callback = function(state)
        toggleInfiniteJump(state)
    end
})


PlayerTab:CreateSection("🚀 Habilidades Especiales")

PlayerTab:CreateToggle({
    Name = "✈️ Modo Vuelo",
    CurrentValue = false,
    Callback = function(state)
        toggleFly(state)
    end
})

PlayerTab:CreateSlider({
    Name = "⚡ Velocidad de Vuelo",
    Range = {10, 200},
    Increment = 5,
    Suffix = " velocidad",
    CurrentValue = 50,
    Callback = function(value)
        flySpeed = value
    end
})

PlayerTab:CreateToggle({
    Name = "🚶 Noclip (Atravesar Paredes)",
    CurrentValue = false,
    Callback = function(state)
        toggleNoclip(state)
    end
})



PlayerTab:CreateToggle({
    Name = "💤 Anti-AFK",
    CurrentValue = false,
    Callback = function(state)
        toggleAntiAFK(state)
    end
})

-- 📦 TAB: ITEMS
local ItemsTab = Window:CreateTab("📦 Items")

ItemsTab:CreateSection("🔍 Gestión de Items")

ItemsTab:CreateParagraph({
    Title = "ℹ️ Instrucciones",
    Content = "Selecciona un item del menú desplegable para teletransportarte o traerlo. Los menús se actualizan automáticamente."
})

-- Variables para dropdowns
local currentSelectedItem = nil
local currentSelectedChest = nil
local itemDropdownOptions = {"Cargando items..."}
local chestDropdownOptions = {"Cargando cofres..."}
local npcDropdownOptions = {"Cargando NPCs..."}

-- Función para obtener listas de items y cofres (únicos)
-- Función para obtener listas de items y cofres (permitir repetidos)
-- Función para obtener listas de items (únicos) y cofres (permitir repetidos)
local function getItemLists()
    local itemsFolder = workspace:FindFirstChild("Items")
    if not itemsFolder then
        return {"No hay items"}, {"No hay cofres"}
    end

    local itemNames = {}
    local chestNames = {}
    local uniqueItems = {}

    for _, item in ipairs(itemsFolder:GetChildren()) do
        local nameLower = item.Name:lower()
        -- 🔹 Cofres → se agregan todos, incluso repetidos
        if nameLower:find("chest") or nameLower:find("cofre") then
            table.insert(chestNames, item.Name)
        else
            -- 🔹 Items → solo únicos
            if not uniqueItems[item.Name] then
                uniqueItems[item.Name] = true
                table.insert(itemNames, item.Name)
            end
        end
    end

    table.sort(itemNames)
    table.sort(chestNames)
    return (#itemNames > 0 and itemNames or {"No hay items"}),
           (#chestNames > 0 and chestNames or {"No hay cofres"})
end




-- Función para obtener lista de NPCs
local function getNPCList()
    local npcsFolder = workspace:FindFirstChild("Characters")
    if not npcsFolder then return {"No hay NPCs"} end
    
    local npcNames = {}
    local uniqueNPCs = {}
    
    for _, npc in ipairs(npcsFolder:GetChildren()) do
        if not uniqueNPCs[npc.Name] then
            uniqueNPCs[npc.Name] = true
            table.insert(npcNames, npc.Name)
        end
    end
    
    table.sort(npcNames)
    return #npcNames > 0 and npcNames or {"No hay NPCs"}
end

-- Actualizar listas iniciales
-- Actualizar listas iniciales
itemDropdownOptions, chestDropdownOptions = getItemLists()
npcDropdownOptions = getNPCList()


-- Dropdown de Items
-- Dropdowns guardados
-- Dropdown de Items
local ItemsDropdown = ItemsTab:CreateDropdown({
    Name = "📦 Seleccionar Item",
    Options = itemDropdownOptions,
    Callback = function(selectedItem)
        if selectedItem == "No hay items" or selectedItem == "Cargando items..." then return end
        currentSelectedItem = selectedItem
        notify("📦 Item Seleccionado", selectedItem, 2)
    end
})

-- Botones para acciones con el item seleccionado
ItemsTab:CreateButton({
    Name = "📍 Teleport al Item Seleccionado",
    Callback = function()
        if not currentSelectedItem then
            notify("⚠️ Aviso", "Selecciona un item primero", 2)
            return
        end
        
        local itemsFolder = workspace:FindFirstChild("Items")
        if not itemsFolder then
            notify("❌ Error", "Carpeta 'Items' no encontrada", 2)
            return
        end
        
        for _, item in ipairs(itemsFolder:GetChildren()) do
            if item.Name == currentSelectedItem then
                teleportToItem(item)
                return
            end
        end
        
        notify("❌ Error", "Item no encontrado", 2)
    end
})

ItemsTab:CreateButton({
    Name = "🎯 Traer Item Seleccionado (uno)",
    Callback = function()
        if not currentSelectedItem then
            notify("⚠️ Aviso", "Selecciona un item primero", 2)
            return
        end
        
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            notify("❌ Error", "Personaje no encontrado", 2)
            return
        end
        
        local root = character.HumanoidRootPart
        local itemsFolder = workspace:FindFirstChild("Items")
        if not itemsFolder then
            notify("❌ Error", "Carpeta 'Items' no encontrada", 2)
            return
        end
        
        for _, item in ipairs(itemsFolder:GetChildren()) do
            if item.Name == currentSelectedItem then
                local part = getItemPart(item)
                if part then
                    part.CFrame = root.CFrame + Vector3.new(0, 5, 0)
                    notify("✅ Item Traído", currentSelectedItem, 2)
                    return
                end
            end
        end
        
        notify("❌ Error", "Item no encontrado", 2)
    end
})

ItemsTab:CreateButton({
    Name = "📦 Traer TODOS los Items del Mismo Tipo",
    Callback = function()
        if not currentSelectedItem then
            notify("⚠️ Aviso", "Selecciona un item primero", 2)
            return
        end
        
        bringSpecificItems(currentSelectedItem)
    end
})

ItemsTab:CreateSection("") -- Separador

ItemsTab:CreateButton({
    Name = "🌟 Traer TODOS los Items (sin cofres)",
    Callback = function()
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            notify("❌ Error", "Personaje no encontrado", 2)
            return
        end

        local root = character.HumanoidRootPart
        local itemsFolder = workspace:FindFirstChild("Items")
        if not itemsFolder then
            notify("❌ Error", "Carpeta 'Items' no encontrada", 2)
            return
        end

        local itemsBrought = 0
        for _, item in ipairs(itemsFolder:GetChildren()) do
            local nameLower = item.Name:lower()
            -- Ignorar cofres
            if not (nameLower:find("chest") or nameLower:find("cofre")) then
                local part = getItemPart(item)
                if part then
                    part.CFrame = root.CFrame + Vector3.new(math.random(-5,5), 5, math.random(-5,5))
                    itemsBrought = itemsBrought + 1
                end
            end
        end

        notify("✅ Items Traídos", "Total: " .. itemsBrought .. " (sin cofres)", 3)
    end
})

ItemsTab:CreateSection("🔄 Auto-Farm")

ItemsTab:CreateToggle({
    Name = "🔄 Auto-Farm Items",
    CurrentValue = false,
    Callback = function(state)
        toggleAutoFarm(state)
    end
})


-- === Cofres ===
ItemsTab:CreateSection("💰 Cofres")


local ChestDropdown = ItemsTab:CreateDropdown({
    Name = "💎 Seleccionar Cofre",
    Options = chestDropdownOptions,
    Callback = function(selectedChest)
        if selectedChest == "No hay cofres" or selectedChest == "Cargando cofres..." then return end
        currentSelectedChest = selectedChest
        notify("💰 Cofre Seleccionado", selectedChest, 2)
    end
})
ItemsTab:CreateButton({
    Name = "📍 Teleport al Cofre Seleccionado",
    Callback = function()
        if not currentSelectedChest then
            notify("⚠️ Aviso", "Selecciona un cofre primero", 2)
            return
        end

        local itemsFolder = workspace:FindFirstChild("Items")
        if not itemsFolder then
            notify("❌ Error", "Carpeta 'Items' no encontrada", 2)
            return
        end

        for _, chest in ipairs(itemsFolder:GetChildren()) do
            if chest.Name == currentSelectedChest then
                teleportToItem(chest)
                return
            end
        end

        notify("❌ Error", "Cofre no encontrado", 2)
    end
})


-- 🔄 Toggle: TP aleatorio a cofres
local randomChestTPEnabled = false
local randomChestTPThread = nil

ItemsTab:CreateToggle({
    Name = "🎲 TP Aleatorio a Cofres",
    CurrentValue = false,
    Callback = function(state)
        randomChestTPEnabled = state

        if randomChestTPEnabled then
            if randomChestTPThread then
                task.cancel(randomChestTPThread)
            end

            randomChestTPThread = task.spawn(function()
                while randomChestTPEnabled do
                    local itemsFolder = workspace:FindFirstChild("Items")
                    if itemsFolder then
                        local chests = {}
                        for _, chest in ipairs(itemsFolder:GetChildren()) do
                            local nameLower = chest.Name:lower()
                            if nameLower:find("chest") or nameLower:find("cofre") then
                                table.insert(chests, chest)
                            end
                        end

                        if #chests > 0 then
                            local chest = chests[math.random(1, #chests)]
                            teleportToItem(chest)
                        else
                            notify("⚠️ Aviso", "No se encontraron cofres", 2)
                        end
                    end
                    task.wait(1)
                end
            end)

            notify("✅ TP Aleatorio", "Se activó el teleport a cofres cada 1s", 3)
        else
            if randomChestTPThread then
                task.cancel(randomChestTPThread)
                randomChestTPThread = nil
            end
            notify("❌ TP Aleatorio", "Se desactivó el teleport", 2)
        end
    end
})



-- ═════════════════════════════════════════════════════════════
-- 👾 SECCIÓN DE NPCs
-- ═════════════════════════════════════════════════════════════

ItemsTab:CreateSection("👾 Gestión de NPCs")

local currentSelectedNPC = nil

local NPCDropdown = ItemsTab:CreateDropdown({
    Name = "👾 Seleccionar NPC",
    Options = npcDropdownOptions,
    Callback = function(selectedNPC)
        if selectedNPC == "No hay NPCs" or selectedNPC == "Cargando NPCs..." then return end
        currentSelectedNPC = selectedNPC
        notify("👾 NPC Seleccionado", selectedNPC, 2)
    end
})

-- Botones para acciones con el NPC seleccionado
ItemsTab:CreateButton({
    Name = "📍 Teleport al NPC Seleccionado",
    Callback = function()
        if not currentSelectedNPC then
            notify("⚠️ Aviso", "Selecciona un NPC primero", 2)
            return
        end
        
        local npcsFolder = workspace:FindFirstChild("Characters")
        if not npcsFolder then
            notify("❌ Error", "Carpeta 'Characters' no encontrada", 2)
            return
        end
        
        for _, npc in ipairs(npcsFolder:GetChildren()) do
            if npc.Name == currentSelectedNPC then
                local part = getItemPart(npc)
                if part and character and character:FindFirstChild("HumanoidRootPart") then
                    character.HumanoidRootPart.CFrame = part.CFrame + Vector3.new(0, 5, 0)
                    notify("✅ Teleport a NPC", currentSelectedNPC, 2)
                    return
                end
            end
        end
        
        notify("❌ Error", "NPC no encontrado", 2)
    end
})

ItemsTab:CreateButton({
    Name = "🎯 Traer NPC Seleccionado (uno)",
    Callback = function()
        if not currentSelectedNPC then
            notify("⚠️ Aviso", "Selecciona un NPC primero", 2)
            return
        end
        
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            notify("❌ Error", "Personaje no encontrado", 2)
            return
        end
        
        local root = character.HumanoidRootPart
        local npcsFolder = workspace:FindFirstChild("Characters")
        if not npcsFolder then
            notify("❌ Error", "Carpeta 'Characters' no encontrada", 2)
            return
        end
        
        for _, npc in ipairs(npcsFolder:GetChildren()) do
            if npc.Name == currentSelectedNPC then
                local part = getItemPart(npc)
                if part then
                    part.CFrame = root.CFrame + Vector3.new(0, 5, 0)
                    notify("✅ NPC Traído", currentSelectedNPC, 2)
                    return
                end
            end
        end
        
        notify("❌ Error", "NPC no encontrado", 2)
    end
})

ItemsTab:CreateButton({
    Name = "👾 Traer TODOS los NPCs del Mismo Tipo",
    Callback = function()
        if not currentSelectedNPC then
            notify("⚠️ Aviso", "Selecciona un NPC primero", 2)
            return
        end
        
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            notify("❌ Error", "Personaje no encontrado", 2)
            return
        end
        
        local root = character.HumanoidRootPart
        local npcsFolder = workspace:FindFirstChild("Characters")
        if not npcsFolder then
            notify("❌ Error", "Carpeta 'Characters' no encontrada", 2)
            return
        end
        
        local targetName = currentSelectedNPC:lower()
        local npcsBrought = 0
        
        for _, npc in ipairs(npcsFolder:GetChildren()) do
            if npc.Name:lower() == targetName then
                local part = getItemPart(npc)
                if part then
                    part.CFrame = root.CFrame + Vector3.new(math.random(-5,5), 5, math.random(-5,5))
                    npcsBrought = npcsBrought + 1
                end
            end
        end
        
        notify("✅ NPCs Traídos", "'" .. currentSelectedNPC .. "': " .. npcsBrought, 2)
    end
})


-- ═════════════════════════════════════════════════════════════
-- 👻 SECCIÓN DE LOST CHILD
-- ═════════════════════════════════════════════════════════════

-- ═════════════════════════════════════════════════════════════
-- 👻 SECCIÓN DE LOST CHILDS (CORREGIDO)
-- ═════════════════════════════════════════════════════════════

ItemsTab:CreateSection("👻 Lost Childs")

local currentSelectedLostChild = nil
local lostChildDropdownOptions = {"Cargando LostChilds..."}

-- 🧭 Función para obtener la lista de LostChilds desde workspace.Characters
local function getLostChildList()
    local charactersFolder = workspace:FindFirstChild("Characters")
    if not charactersFolder then return {"No hay LostChilds"} end

    local lostList = {}
    local uniqueNames = {}

    for _, npc in ipairs(charactersFolder:GetChildren()) do
        local nameLower = npc.Name:lower()
        if nameLower:find("lost") or nameLower:find("child") then
            if not uniqueNames[npc.Name] then
                uniqueNames[npc.Name] = true
                table.insert(lostList, npc.Name)
            end
        end
    end

    table.sort(lostList)
    return #lostList > 0 and lostList or {"No hay LostChilds"}
end

-- Inicializar lista
lostChildDropdownOptions = getLostChildList()

-- Crear dropdown de LostChilds
local LostChildDropdown = ItemsTab:CreateDropdown({
    Name = "👻 Seleccionar Lost Child",
    Options = lostChildDropdownOptions,
    Callback = function(selected)
        if selected == "No hay LostChilds" or selected == "Cargando LostChilds..." then return end
        currentSelectedLostChild = selected
        notify("👻 LostChild Seleccionado", selected, 2)
    end
})

-- 📍 Botón: Teleport al LostChild seleccionado
ItemsTab:CreateButton({
    Name = "📍 Teleport al LostChild Seleccionado",
    Callback = function()
        if not currentSelectedLostChild then
            notify("⚠️ Aviso", "Selecciona un LostChild primero", 2)
            return
        end

        local charactersFolder = workspace:FindFirstChild("Characters")
        if not charactersFolder then
            notify("❌ Error", "Carpeta 'Characters' no encontrada", 2)
            return
        end

        for _, npc in ipairs(charactersFolder:GetChildren()) do
            local nameLower = npc.Name:lower()
            if (nameLower:find("lost") or nameLower:find("child")) and npc.Name == currentSelectedLostChild then
                local part = getItemPart(npc)
                if part and character and character:FindFirstChild("HumanoidRootPart") then
                    character.HumanoidRootPart.CFrame = part.CFrame + Vector3.new(0, 5, 0)
                    notify("✅ Teletransportado", "A: " .. currentSelectedLostChild, 2)
                    return
                end
            end
        end

        notify("❌ Error", "LostChild no encontrado", 2)
    end
})





-- ═════════════════════════════════════════════════════════════
-- 🔄 SISTEMA DE ACTUALIZACIÓN AUTOMÁTICA DE DROPDOWNS
-- ═════════════════════════════════════════════════════════════
-- ═════════════════════════════════════════════════════════════
-- 🔄 SISTEMA DE ACTUALIZACIÓN CON DEBOUNCE (ANTI-LAG)
-- ═════════════════════════════════════════════════════════════

-- ═════════════════════════════════════════════════════════════
-- 🔄 SISTEMA DE ACTUALIZACIÓN CON UpdateOnClose (SIN LAG)
-- ═════════════════════════════════════════════════════════════

local function safeUpdateDropdownOnClose(dropdown, newOptions)
    if dropdown and typeof(dropdown.UpdateOnClose) == "function" then
        dropdown:UpdateOnClose(newOptions)
    end
end

-- Función que prepara actualizaciones (solo se aplican al cerrar los dropdowns)
local function refreshAllDropdowns()
    local newItemList, newChestList = getItemLists()
    safeUpdateDropdownOnClose(ItemsDropdown, newItemList)
    safeUpdateDropdownOnClose(ChestDropdown, newChestList)
    safeUpdateDropdownOnClose(NPCDropdown, getNPCList())
    safeUpdateDropdownOnClose(LostChildDropdown, getLostChildList())
end

-- 🔥 Debounce: evita actualizaciones excesivas
local pendingUpdate = false
local function scheduleUpdate()
    if not pendingUpdate then
        pendingUpdate = true
        task.delay(1.5, function() -- Actualiza cada 1.5s (más rápido que antes)
            refreshAllDropdowns()
            pendingUpdate = false
        end)
    end
end

-- 📦 Items y Cofres
local itemsFolder = workspace:FindFirstChild("Items")
if itemsFolder then
    itemsFolder.ChildAdded:Connect(scheduleUpdate)
    itemsFolder.ChildRemoved:Connect(scheduleUpdate)
end

-- 👾 NPCs y LostChilds
local charactersFolder = workspace:FindFirstChild("Characters")
if charactersFolder then
    charactersFolder.ChildAdded:Connect(scheduleUpdate)
    charactersFolder.ChildRemoved:Connect(scheduleUpdate)
end

-- 🔄 Actualización inicial al abrir la interfaz
task.delay(1, function()
    refreshAllDropdowns()
end)




-- 👁️ TAB: ESP
local ESPTab = Window:CreateTab("👁️ ESP")

ESPTab:CreateSection("👀 Sistema de ESP")

ESPTab:CreateToggle({
    Name = "📦 ESP de Items",
    CurrentValue = false,
    Callback = function(state)
        if state then
            local folder = workspace:FindFirstChild("Items")
            if folder then
                for _, obj in pairs(folder:GetChildren()) do
                    createESP(obj, Color3.fromRGB(255, 255, 0), obj.Name)
                end
                notify("✅ ESP Items", "Activado", 2)
            else
                notify("❌ Error", "Carpeta 'Items' no encontrada", 2)
            end
        else
            local folder = workspace:FindFirstChild("Items")
            if folder then
                for _, obj in pairs(folder:GetChildren()) do
                    removeESP(obj)
                end
            end
            notify("❌ ESP Items", "Desactivado", 2)
        end
    end
})

ESPTab:CreateToggle({
    Name = "👥 ESP de NPCs",
    CurrentValue = false,
    Callback = function(state)
        if state then
            local folder = workspace:FindFirstChild("Characters")
            if folder then
                for _, obj in pairs(folder:GetChildren()) do
                    createESP(obj, Color3.fromRGB(255, 100, 100), obj.Name)
                end
                notify("✅ ESP NPCs", "Activado", 2)
            else
                notify("❌ Error", "Carpeta 'Characters' no encontrada", 2)
            end
        else
            local folder = workspace:FindFirstChild("Characters")
            if folder then
                for _, obj in pairs(folder:GetChildren()) do
                    removeESP(obj)
                end
            end
            notify("❌ ESP NPCs", "Desactivado", 2)
        end
    end
})

ESPTab:CreateToggle({
    Name = "🎮 ESP de Jugadores",
    CurrentValue = false,
    Callback = function(state)
        if state then
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= player and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                    createESP(plr.Character, Color3.fromRGB(100, 255, 100), plr.Name)
                end
            end
            notify("✅ ESP Jugadores", "Activado", 2)
        else
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= player and plr.Character then
                    removeESP(plr.Character)
                end
            end
            notify("❌ ESP Jugadores", "Desactivado", 2)
        end
    end
})

ESPTab:CreateSection("🧹 Gestión de ESP")

ESPTab:CreateButton({
    Name = "🗑️ Limpiar Todo ESP",
    Callback = function()
        for obj, esp in pairs(espObjects) do
            if esp then
                esp:Destroy()
            end
        end
        espObjects = {}
        notify("✅ ESP Limpiado", "Todo ESP removido", 2)
    end
})

-- 🎨 TAB: VISUAL
local VisualTab = Window:CreateTab("🎨 Visual")

VisualTab:CreateSection("💡 Efectos Visuales")

VisualTab:CreateToggle({
    Name = "💡 Fullbright (Luz Máxima)",
    CurrentValue = false,
    Callback = function(state)
        toggleFullbright(state)
    end
})

VisualTab:CreateToggle({
    Name = "🧱 Wallhack (Ver a través de paredes)",
    CurrentValue = false,
    Callback = function(state)
        toggleWallhack(state)
    end
})

VisualTab:CreateSection("🌫️ Control de Niebla")

VisualTab:CreateButton({
    Name = "🚫 Remover Niebla",
    Callback = function()
        Lighting.FogEnd = 100000
        Lighting.FogStart = 0
        notify("✅ Niebla Removida", "Visibilidad máxima", 2)
    end
})

VisualTab:CreateButton({
    Name = "🔄 Restaurar Niebla",
    Callback = function()
        Lighting.FogEnd = 500
        Lighting.FogStart = 15
        notify("✅ Niebla Restaurada", "Visibilidad normal", 2)
    end
})

VisualTab:CreateSection("🎨 Personalización")

VisualTab:CreateColorPicker({
    Name = "🌈 Color de Ambiente",
    Color = Lighting.Ambient,
    Callback = function(color)
        Lighting.Ambient = color
        notify("✅ Color Aplicado", "Ambiente cambiado", 2)
    end
})

VisualTab:CreateButton({
    Name = "🌅 Cambiar Hora del Día",
    Callback = function()
        Lighting.ClockTime = 12
        notify("✅ Mediodía", "Hora cambiada a 12:00", 2)
    end
})

VisualTab:CreateSlider({
    Name = "🕐 Hora del Día",
    Range = {0, 24},
    Increment = 1,
    Suffix = ":00",
    CurrentValue = Lighting.ClockTime,
    Callback = function(value)
        Lighting.ClockTime = value
    end
})

-- 🌐 TAB: TELETRANSPORTE
local TeleportTab = Window:CreateTab("🌐 Teleport")

TeleportTab:CreateSection("📍 Teletransporte")

TeleportTab:CreateInput({
    Name = "👤 Teleport a Jugador",
    PlaceholderText = "Nombre o DisplayName (parcial)...",
    Callback = function(playerName)
        if not playerName or playerName == "" then
            notify("⚠️ Aviso", "Escribe parte del nombre o displayname", 2)
            return
        end

        local inputLower = playerName:lower()
        local targetPlayer = nil

        -- Buscar coincidencia parcial en Name o DisplayName
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= player then
                local nameLower = plr.Name:lower()
                local displayLower = plr.DisplayName:lower()
                if nameLower:find(inputLower) or displayLower:find(inputLower) then
                    targetPlayer = plr
                    break
                end
            end
        end

        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
                notify("✅ Teletransporte", "A: " .. targetPlayer.DisplayName .. " (" .. targetPlayer.Name .. ")", 3)
            end
        else
            notify("❌ Error", "Jugador no encontrado: " .. playerName, 2)
        end
    end
})


TeleportTab:CreateSection("🗺️ Ubicaciones Importantes")

TeleportTab:CreateButton({
    Name = "🏠 Spawn Principal",
    Callback = function()
        if character and character:FindFirstChild("HumanoidRootPart") then
            local spawnPoint = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("SpawnLocation")
            if spawnPoint then
                character.HumanoidRootPart.CFrame = spawnPoint.CFrame + Vector3.new(0, 5, 0)
            else
                character.HumanoidRootPart.CFrame = CFrame.new(0, 50, 0)
            end
            notify("✅ Spawn", "Teletransportado", 2)
        end
    end
})

TeleportTab:CreateInput({
    Name = "📦 Teleport a Item",
    PlaceholderText = "Nombre del item...",
    Callback = function(itemName)
        if not itemName or itemName == "" then return end
        
        local itemsFolder = workspace:FindFirstChild("Items")
        if not itemsFolder then
            notify("❌ Error", "Carpeta 'Items' no encontrada", 2)
            return
        end
        
        local targetName = itemName:lower()
        for _, item in ipairs(itemsFolder:GetChildren()) do
            if item.Name:lower():find(targetName) then
                teleportToItem(item)
                return
            end
        end
        
        notify("❌ Error", "Item no encontrado: " .. itemName, 2)
    end
})

TeleportTab:CreateSection("🎯 Lista de Jugadores")

TeleportTab:CreateDropdown({
    Name = "📋 Seleccionar Jugador",
    Options = (function()
        local playerList = {}
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= player then
                table.insert(playerList, plr.Name)
            end
        end
        return #playerList > 0 and playerList or {"No hay jugadores"}
    end)(),
    Callback = function(selectedPlayer)
        if selectedPlayer == "No hay jugadores" then return end
        
        local targetPlayer = Players:FindFirstChild(selectedPlayer)
        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
                notify("✅ Teletransporte", "A: " .. targetPlayer.Name, 2)
            end
        end
    end
})

-- ⚙️ TAB: CONFIGURACIÓN
local SettingsTab = Window:CreateTab("⚙️ Config")

SettingsTab:CreateSection("🎨 Temas de la Interfaz")


SettingsTab:CreateButton({
    Name = "🎲 Tema Aleatorio",
    Callback = function()
        local themes = {"red", "green", "blue", "purple", "neon", "neon_blue", "neon_pink", "oscuro neon"}
        local randomTheme = themes[math.random(1, #themes)]
        Window:SetTheme(randomTheme)
        notify("✅ Tema Aleatorio", "Aplicado: " .. randomTheme, 3)
    end
})

SettingsTab:CreateSection("⌨️ Configuración de Teclas")

SettingsTab:CreateParagraph({
    Title = "🎮 Keybinds Globales",
    Content = "F2: Collect | F3: Noclip | F4: Fly\nF5: InfJump | F6: Fullbright\nF7: Auto-Farm | F8: Anti-AFK"
})

SettingsTab:CreateKeybind({
    Name = "🎮 Hotkey Toggle Fly",
    CurrentKeybind = "F4",
    Callback = function(key)
        flyEnabled = not flyEnabled
        toggleFly(flyEnabled)
    end
})

SettingsTab:CreateKeybind({
    Name = "🚶 Hotkey Toggle Noclip",
    CurrentKeybind = "F3",
    Callback = function(key)
        noclipEnabled = not noclipEnabled
        toggleNoclip(noclipEnabled)
    end
})

SettingsTab:CreateSection("ℹ️ Información del Script")

SettingsTab:CreateParagraph({
    Title = "📊 Estadísticas del Jugador",
    Content = string.format(
        "🎮 Jugador: %s\n" ..
        "🆔 UserID: %d\n" ..
        "📅 Cuenta creada: hace %d días\n" ..
        "🎯 Juego: 99 Noches en el Bosque",
        player.Name,
        player.UserId,
        player.AccountAge
    )
})

SettingsTab:CreateSection("📱 Enlaces y Redes")

SettingsTab:CreateButton({
    Name = "🎥 YouTube - joao_mods",
    Callback = function()
        if setclipboard then
            setclipboard("https://youtube.com/@joao_mods0")
        end
        notify("📺 YouTube", "Enlace copiado al portapapeles. ¡Suscríbete!", 4)
    end
})

SettingsTab:CreateButton({
    Name = "💬 Discord",
    Callback = function()
        if setclipboard then
            setclipboard("https://discord.gg/ZTVC94ZmVZ")
        end
        notify("💬 Discord", "Enlace copiado al portapapeles", 3)
    end
})

SettingsTab:CreateSection("🛠️ Herramientas Adicionales")

SettingsTab:CreateButton({
    Name = "🗑️ Limpiar Todas las Conexiones",
    Callback = function()
        for name, connection in pairs(connections) do
            if typeof(connection) == "RBXScriptConnection" then
                pcall(function() connection:Disconnect() end)
            elseif typeof(connection) == "thread" then
                pcall(function() task.cancel(connection) end)
            end
        end
        connections = {}
        
        noclipEnabled = false
        autoFarmEnabled = false
        flyEnabled = false
        infiniteJumpEnabled = false
        antiAFKEnabled = false
        fullbrightEnabled = false
        wallHackEnabled = false
        autoClickEnabled = false
        
        notify("✅ Limpieza", "Todas las funciones desactivadas", 3)
    end
})

-- ═══════════════════════════════════════════════════════
-- 🎮 KEYBINDS GLOBALES
-- ═══════════════════════════════════════════════════════

UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    
    if input.KeyCode == Enum.KeyCode.F2 then
        autoCollectItems()
    elseif input.KeyCode == Enum.KeyCode.F3 then
        noclipEnabled = not noclipEnabled
        toggleNoclip(noclipEnabled)
    elseif input.KeyCode == Enum.KeyCode.F4 then
        flyEnabled = not flyEnabled
        toggleFly(flyEnabled)
    elseif input.KeyCode == Enum.KeyCode.F5 then
        infiniteJumpEnabled = not infiniteJumpEnabled
        toggleInfiniteJump(infiniteJumpEnabled)
    elseif input.KeyCode == Enum.KeyCode.F6 then
        fullbrightEnabled = not fullbrightEnabled
        toggleFullbright(fullbrightEnabled)
    elseif input.KeyCode == Enum.KeyCode.F7 then
        autoFarmEnabled = not autoFarmEnabled
        toggleAutoFarm(autoFarmEnabled)
    elseif input.KeyCode == Enum.KeyCode.F8 then
        antiAFKEnabled = not antiAFKEnabled
        toggleAntiAFK(antiAFKEnabled)
    end
end)

-- ═══════════════════════════════════════════════════════
-- 🔄 ACTUALIZACIÓN DEL PERSONAJE AL RESPAWNEAR
-- ═══════════════════════════════════════════════════════

player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    originalWalkSpeed = humanoid.WalkSpeed
    originalJumpPower = humanoid.JumpPower
    
    task.wait(1)
    notify("🔄 Respawn", "Personaje recargado - Script listo", 3)
end)

-- ═══════════════════════════════════════════════════════
-- 🎉 NOTIFICACIONES FINALES
-- ═══════════════════════════════════════════════════════



task.wait(1)
JmodsLib:Notify({
    Title = "⌨️ Keybinds Rápidos",
    Content = "F2: Collect | F3: Noclip | F4: Fly\nF5: InfJump | F6: Fullbright\nF7: Auto-Farm | F8: Anti-AFK",
    Duration = 8
})

task.wait(8)
JmodsLib:Notify({
    Title = "📺 Suscríbete a joao_mods",
    Content = "Más scripts en: https://youtube.com/@joao_mods0",
    Duration = 10,
    Image = 13458017478
})

-- ═══════════════════════════════════════════════════════
-- 📊 SISTEMA DE DEBUG (OPCIONAL)
-- ═══════════════════════════════════════════════════════

_G.JmodsHub = {
    version = "2.0",
    library = "JmodsLib",
    game = "99 Noches en el Bosque",
    author = "joao_mods",
    status = {
        noclip = function() return noclipEnabled end,
        fly = function() return flyEnabled end,
        autoFarm = function() return autoFarmEnabled end,
        infiniteJump = function() return infiniteJumpEnabled end,
        antiAFK = function() return antiAFKEnabled end,
        fullbright = function() return fullbrightEnabled end,
        wallhack = function() return wallHackEnabled end,
        autoClick = function() return autoClickEnabled end
    },
    functions = {
        notify = notify,
        toggleFly = toggleFly,
        toggleNoclip = toggleNoclip,
        autoCollect = autoCollectItems,
        createESP = createESP,
        removeESP = removeESP,
        toggleAutoFarm = toggleAutoFarm,
        toggleFullbright = toggleFullbright,
        toggleWallhack = toggleWallhack
    },
    connections = connections,
    espObjects = espObjects
}

print("═══════════════════════════════════════════════════════")
print("✅ JMODS HUB - 99 NOCHES EN EL BOSQUE v2.0")
print("═══════════════════════════════════════════════════════")
print("🎨 Interfaz: JmodsLib")
print("👤 Creador: joao_mods")
print("📺 YouTube: @joao_mods0")
print("💬 Discord: discord.gg/ZTVC94ZmVZ")
print("═══════════════════════════════════════════════════════")
print("📋 FUNCIONES DISPONIBLES:")
print("  ✓ Sistema de vuelo avanzado con velocidad ajustable")
print("  ✓ Noclip para atravesar paredes")
print("  ✓ Auto-Farm de items automático")
print("  ✓ ESP para items, NPCs y jugadores")
print("  ✓ Modificadores de velocidad y salto con sliders")
print("  ✓ Sistema de teletransporte completo")
print("  ✓ Herramientas de combate (Auto-Click, Invisibilidad)")
print("  ✓ Efectos visuales (Fullbright, Wallhack)")
print("  ✓ Anti-AFK automático")
print("  ✓ Control de hora del día y niebla")
print("  ✓ 24 temas personalizables con auto-guardado")
print("  ✓ Abrir cofres instantáneamente")
print("═══════════════════════════════════════════════════════")
print("⌨️ KEYBINDS GLOBALES:")
print("  F2 → Auto-Collect Items (una vez)")
print("  F3 → Toggle Noclip")
print("  F4 → Toggle Fly")
print("  F5 → Toggle Infinite Jump")
print("  F6 → Toggle Fullbright")
print("  F7 → Toggle Auto-Farm")
print("  F8 → Toggle Anti-AFK")
print("  INSERT → Minimizar/Restaurar GUI")
print("═══════════════════════════════════════════════════════")
print("📑 TABS DISPONIBLES:")
print("  🏠 Principal - Información y acciones rápidas")
print("  🎮 Jugador - Modificadores y habilidades")
print("  📦 Items - Gestión de items y auto-farm")
print("  ⚔️ Combate - Herramientas de combate")
print("  👁️ ESP - Sistema de visión mejorada")
print("  🎨 Visual - Efectos visuales y personalización")
print("  🌐 Teleport - Sistema de teletransporte")
print("  ⚙️ Config - Configuración y créditos")
print("═══════════════════════════════════════════════════════")
print("✅ Script cargado correctamente - Sin errores")
print("🎮 ¡Disfruta del hub y suscríbete a joao_mods!")
print("💡 Usa _G.JmodsHub para acceder a funciones avanzadas")
print("═══════════════════════════════════════════════════════")

-- ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
-- ‚ïë  üåô J99 - HUB COMPLETO 99 NOCHES EN EL BOSQUE V3.0   ‚ïë
-- ‚ïë  de joao_mods
-- ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

-- ‚ö° Cargar JmodsLib
local JmodsLib = loadstring(game:HttpGet('https://raw.githubusercontent.com/pruebasjoao/test/refs/heads/main/JmodsLibV1.0'))()

-- üéÆ Servicios de Roblox
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Lighting = game:GetService("Lighting")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreGui = game:GetService("CoreGui")
local player = Players.LocalPlayer

-- üîó Variables que se actualizan con cada personaje
local character
local humanoid
local connections = {}
local espObjects = {}

-- üîó Remote Events
local remoteEvents = ReplicatedStorage:WaitForChild("RemoteEvents")





-- üîÑ Funci√≥n para actualizar referencias del personaje
local function updateCharacterReferences(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    
    -- Restaurar WalkSpeed
    if _G.HackedWalkSpeed then
        humanoid.WalkSpeed = _G.HackedWalkSpeed
        humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
            if humanoid.WalkSpeed ~= _G.HackedWalkSpeed then
                humanoid.WalkSpeed = _G.HackedWalkSpeed
            end
        end)
    end
    
    -- Restaurar Noclip si estaba activo
    if noclipEnabled then
        toggleNoclip(false)
        task.wait(0.1)
        toggleNoclip(true)
    end
    
    -- Restaurar Fly si estaba activo
    if flyEnabled then
        toggleFly(false)
        task.wait(0.1)
        toggleFly(true)
    end
    
    -- Restaurar Infinite Jump si estaba activo
    if infiniteJumpEnabled then
        toggleInfiniteJump(false)
        task.wait(0.1)
        toggleInfiniteJump(true)
    end
end

-- Inicializar personaje
character = player.Character or player.CharacterAdded:Wait()
updateCharacterReferences(character)

-- Detectar cuando el personaje respawnea
player.CharacterAdded:Connect(function(newChar)
    updateCharacterReferences(newChar)
    notify("üîÑ Personaje Actualizado", "Referencias restauradas", 2)
end)




-- Estados de funciones
local noclipEnabled = false
local autoFarmEnabled = false
local flyEnabled = false
local infiniteJumpEnabled = false
local antiAFKEnabled = false
local fullbrightEnabled = false
local wallHackEnabled = false
local autoClickEnabled = false
local killAuraEnabled = false
local itemESPEnabled = false
local playerESPEnabled = false
local chamsEnabled = false

-- Configuraci√≥n
local flySpeed = 50
local killAuraRadius = 200
local originalWalkSpeed = humanoid.WalkSpeed or 16
local originalJumpPower = humanoid.JumpPower or 50
local originalAmbient = Lighting.Ambient
local originalBrightness = Lighting.Brightness
local originalOutdoorAmbient = Lighting.OutdoorAmbient

-- Referencias de workspace
local itemFolder = workspace:WaitForChild("Items")
local characterFolder = workspace:WaitForChild("Characters")

-- Posiciones para auto farm
local campfireDropPos = Vector3.new(0, 19, 0)
local machineDropPos = Vector3.new(21, 16, -5)

-- ü™ü Crear ventana principal
local Window = JmodsLib:CreateWindow({
    Name = "J99",
    Icon = 128308831323216,
    LoadingTitle = "Cargando J99 Hub",
    LoadingSubtitle = "Preparando funciones...",
    Theme = "neon",
    Intro = true,   
    IntroIcon = 128308831323216,
    AnimationIntro = 0,
    DragImage = 127271155083726,
    OpenButtom = "Izquierda",
})

-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- üì¶ FUNCIONES PRINCIPALES
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

-- üîß Sistema de notificaciones personalizado
local function notify(title, content, duration)
    JmodsLib:Notify({
        Title = title,
        Content = content,
        Duration = duration or 3
    })
end

-- üéØ Obtener parte del item
local function getItemPart(item)
    if item:IsA("Model") then
        return item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
    elseif item:IsA("BasePart") then
        return item
    end
    return nil
end

-- üîÑ Convertir string a CFrame
local function stringToCFrame(str)
    local x, y, z = str:match("([^,]+),%s*([^,]+),%s*([^,]+)")
    x, y, z = tonumber(x), tonumber(y), tonumber(z)
    if x and y and z then
        return CFrame.new(x, y, z)
    end
    return nil
end

-- üöÄ Teletransportar con tween
local function teleportToTarget(cf, duration)
    local char = player.Character
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    if duration and duration > 0 then
        local info = TweenInfo.new(duration, Enum.EasingStyle.Linear)
        local goal = { CFrame = cf }
        local tween = TweenService:Create(hrp, info, goal)
        tween:Play()
    else
        hrp.CFrame = cf
    end
end

-- üöÄ FUNCI√ìN: Toggle Fly
-- üöÄ FUNCI√ìN: Toggle Fly
local function toggleFly(state)
    flyEnabled = state
    
    if flyEnabled then
        -- Limpiar conexi√≥n anterior
        if connections.fly then
            connections.fly:Disconnect()
            connections.fly = nil
        end
        
        -- Verificar personaje
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            flyEnabled = false
            notify("‚ùå Error", "Personaje no encontrado", 2)
            return
        end
        
        -- Limpiar BodyVelocity anterior si existe
        local oldBodyVel = character.HumanoidRootPart:FindFirstChild("BodyVelocity")
        if oldBodyVel then
            oldBodyVel:Destroy()
        end
        
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.Parent = character.HumanoidRootPart
        
        connections.fly = RunService.Heartbeat:Connect(function()
            if not flyEnabled or not character or not character:FindFirstChild("HumanoidRootPart") then
                if bodyVelocity and bodyVelocity.Parent then 
                    bodyVelocity:Destroy() 
                end
                if connections.fly then
                    connections.fly:Disconnect()
                    connections.fly = nil
                end
                return
            end
            
            local camera = workspace.CurrentCamera
            local moveVector = Vector3.new(0, 0, 0)
            
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                moveVector = moveVector + camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                moveVector = moveVector - camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                moveVector = moveVector - camera.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                moveVector = moveVector + camera.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                moveVector = moveVector + Vector3.new(0, 1, 0)
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                moveVector = moveVector - Vector3.new(0, 1, 0)
            end
            
            if bodyVelocity and bodyVelocity.Parent then
                bodyVelocity.Velocity = moveVector * flySpeed
            end
        end)
        
        notify("‚úÖ Vuelo Activado", "WASD: mover | Space/Shift: subir/bajar", 3)
    else
        if connections.fly then
            connections.fly:Disconnect()
            connections.fly = nil
        end
        
        if character and character:FindFirstChild("HumanoidRootPart") then
            local bodyVelocity = character.HumanoidRootPart:FindFirstChild("BodyVelocity")
            if bodyVelocity then
                bodyVelocity:Destroy()
            end
        end
        
        notify("‚ùå Vuelo Desactivado", "Modo vuelo deshabilitado", 2)
    end
end

-- üö∂ FUNCI√ìN: Toggle Noclip
local function toggleNoclip(state)
    noclipEnabled = state
    
    if noclipEnabled then
        if connections.noclip then
            connections.noclip:Disconnect()
            connections.noclip = nil
        end
        
        connections.noclip = RunService.Stepped:Connect(function()
            if noclipEnabled and character then
                for _, part in pairs(character:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
        
        notify("‚úÖ Noclip Activado", "Atraviesa paredes", 2)
    else
        if connections.noclip then
            connections.noclip:Disconnect()
            connections.noclip = nil
        end
        
        if character then
            for _, part in pairs(character:GetChildren()) do
                if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                    part.CanCollide = true
                end
            end
        end
        
        notify("‚ùå Noclip Desactivado", "Colisiones restauradas", 2)
    end
end


-- üåü FUNCI√ìN: Toggle Salto Infinito
local function toggleInfiniteJump(state)
    infiniteJumpEnabled = state
    
    if infiniteJumpEnabled then
        if connections.infJump then
            connections.infJump:Disconnect()
            connections.infJump = nil
        end
        
        connections.infJump = UserInputService.JumpRequest:Connect(function()
            if infiniteJumpEnabled and character and character:FindFirstChild("Humanoid") then
                character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
        
        notify("‚úÖ Salto Infinito", "Salta sin l√≠mites", 2)
    else
        if connections.infJump then
            connections.infJump:Disconnect()
            connections.infJump = nil
        end
        
        notify("‚ùå Salto Desactivado", "Salto normal", 2)
    end
end

-- üí° FUNCI√ìN: Toggle Fullbright
local function toggleFullbright(state)
    fullbrightEnabled = state
    
    if fullbrightEnabled then
        Lighting.Ambient = Color3.fromRGB(255, 255, 255)
        Lighting.Brightness = 2
        Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
        Lighting.GlobalShadows = false
        
        notify("‚úÖ Fullbright ON", "M√°xima iluminaci√≥n", 2)
    else
        Lighting.Ambient = originalAmbient
        Lighting.Brightness = originalBrightness
        Lighting.OutdoorAmbient = originalOutdoorAmbient
        Lighting.GlobalShadows = true
        
        notify("‚ùå Fullbright OFF", "Iluminaci√≥n normal", 2)
    end
end

-- üß± FUNCI√ìN: Toggle Wallhack
local function toggleWallhack(state)
    wallHackEnabled = state
    
    if wallHackEnabled then
        if connections.wallhack then
            task.cancel(connections.wallhack)
        end
        
        connections.wallhack = task.spawn(function()
            while wallHackEnabled do
                for _, obj in pairs(workspace:GetDescendants()) do
                    if obj:IsA("BasePart") and (obj.Name:match("Wall") or obj.Name:match("Door")) then
                        obj.Transparency = 0.8
                        obj.CanCollide = false
                    end
                end
                task.wait(1)
            end
        end)
        
        notify("‚úÖ Wallhack ON", "Paredes transparentes", 2)
    else
        if connections.wallhack then
            task.cancel(connections.wallhack)
            connections.wallhack = nil
        end
        
        for _, obj in pairs(workspace:GetDescendants()) do
            if obj:IsA("BasePart") and (obj.Name:match("Wall") or obj.Name:match("Door")) then
                obj.Transparency = 0
                obj.CanCollide = true
            end
        end
        
        notify("‚ùå Wallhack OFF", "Paredes normales", 2)
    end
end

-- üñ±Ô∏è FUNCI√ìN: Toggle Auto-Click
local function toggleAutoClick(state)
    autoClickEnabled = state
    
    if autoClickEnabled then
        if connections.autoClick then
            task.cancel(connections.autoClick)
        end
        
        connections.autoClick = task.spawn(function()
            while autoClickEnabled do
                task.wait(0.05)
                if autoClickEnabled then
                    mouse1click()
                end
            end
        end)
        
        notify("‚úÖ Auto-Click ON", "Click autom√°tico activado", 2)
    else
        if connections.autoClick then
            task.cancel(connections.autoClick)
            connections.autoClick = nil
        end
        
        notify("‚ùå Auto-Click OFF", "Click manual", 2)
    end
end

-- üí§ FUNCI√ìN: Toggle Anti-AFK
local function toggleAntiAFK(state)
    antiAFKEnabled = state
    
    if antiAFKEnabled then
        if connections.antiAFK then
            task.cancel(connections.antiAFK)
        end
        
        connections.antiAFK = task.spawn(function()
            while antiAFKEnabled do
                task.wait(math.random(300, 600))
                if antiAFKEnabled and character and character:FindFirstChild("HumanoidRootPart") then
                    local currentPos = character.HumanoidRootPart.CFrame
                    character.HumanoidRootPart.CFrame = currentPos + Vector3.new(0, 0.1, 0)
                    task.wait(0.1)
                    character.HumanoidRootPart.CFrame = currentPos
                end
            end
        end)
        
        notify("‚úÖ Anti-AFK ON", "No ser√°s expulsado", 2)
    else
        if connections.antiAFK then
            task.cancel(connections.antiAFK)
            connections.antiAFK = nil
        end
        
        notify("‚ùå Anti-AFK OFF", "Anti-AFK desactivado", 2)
    end
end

-- üì¶ FUNCI√ìN: Mover item a posici√≥n usando Remote Events
local function moveItemToPos(item, position)
    if not item or not item:IsDescendantOf(workspace) then return end
    local part = item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart") or item:FindFirstChild("Handle")
    if not part then return end

    if not item.PrimaryPart then
        pcall(function() item.PrimaryPart = part end)
    end

    pcall(function()
        remoteEvents.RequestStartDraggingItem:FireServer(item)
        task.wait(0.05)
        item:SetPrimaryPartCFrame(CFrame.new(position))
        task.wait(0.05)
        remoteEvents.StopDraggingItem:FireServer(item)
    end)
end

-- üì¶ FUNCI√ìN: Auto Collect Items (b√°sico)
local function autoCollectItems()
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        notify("‚ùå Error", "Personaje no encontrado", 2)
        return
    end
    
    local root = character.HumanoidRootPart
    local itemsCollected = 0
    for _, item in ipairs(itemFolder:GetChildren()) do
        if item:IsA("Model") or item:IsA("BasePart") then
            local part = getItemPart(item)
            if part and (part.Position - root.Position).Magnitude <= 50 then
                moveItemToPos(item, root.Position)
                itemsCollected = itemsCollected + 1
            end
        end
    end
    
    notify("‚úÖ Items Recolectados", "Total: " .. itemsCollected, 2)
end

-- üëÅÔ∏è FUNCI√ìN: Crear ESP
local function createESP(obj, color, text)
    if espObjects[obj] then return end
    
    local part = getItemPart(obj)
    if not part then return end
    
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP_" .. obj.Name
    billboard.Adornee = part
    billboard.Size = UDim2.new(0, 120, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true
    billboard.MaxDistance = 10000
    billboard.Parent = part
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.BackgroundColor3 = color or Color3.fromRGB(255, 255, 0)
    frame.BackgroundTransparency = 0.3
    frame.Parent = billboard
    Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 6)
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.Text = text or obj.Name
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextStrokeTransparency = 0
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.GothamBold
    label.TextScaled = true
    label.Parent = frame
    
    espObjects[obj] = billboard
end

local function removeESP(obj)
    if espObjects[obj] then
        espObjects[obj]:Destroy()
        espObjects[obj] = nil
    end
end

-- üìç FUNCI√ìN: Teletransporte a item
local function teleportToItem(item)
    if not item or not item:IsDescendantOf(workspace) then
        notify("‚ùå Error", "Item no v√°lido", 2)
        return
    end
    
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        notify("‚ùå Error", "Personaje no encontrado", 2)
        return
    end
    
    local part = getItemPart(item)
    if part then
        character.HumanoidRootPart.CFrame = part.CFrame + Vector3.new(0, 5, 0)
        notify("‚úÖ Teletransporte", "A: " .. item.Name, 2)
    end
end

-- ‚öîÔ∏è FUNCI√ìN: Kill Aura
local toolsDamageIDs = {
    ["Old Axe"] = "1_8982038982",
    ["Good Axe"] = "112_8982038982",
    ["Strong Axe"] = "116_8982038982",
    ["Chainsaw"] = "647_8992824875",
    ["Spear"] = "196_8999010016"
}

local function getAnyToolWithDamageID()
    local plr = player
    if not plr:FindFirstChild("Inventory") then return nil, nil end
    
    for toolName, damageID in pairs(toolsDamageIDs) do
        local tool = plr.Inventory:FindFirstChild(toolName)
        if tool then
            return tool, damageID
        end
    end
    return nil, nil
end

local function equipTool(tool)
    if tool then
        remoteEvents.EquipItemHandle:FireServer("FireAllClients", tool)
    end
end

local function unequipTool(tool)
    if tool then
        remoteEvents.UnequipItemHandle:FireServer("FireAllClients", tool)
    end
end

local function killAuraLoop()
    while killAuraEnabled do
        local char = player.Character
        if not char then 
            task.wait(0.5)
            continue
        end
        
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if not hrp then 
            task.wait(0.5)
            continue
        end

        local tool, damageID = getAnyToolWithDamageID()
        if tool and damageID then
            equipTool(tool)

            local charactersFolder = workspace:FindFirstChild("Characters")
            if charactersFolder then
                for _, mob in ipairs(charactersFolder:GetChildren()) do
                    if mob:IsA("Model") then
                        local part = mob:FindFirstChildWhichIsA("BasePart")
                        if part and (part.Position - hrp.Position).Magnitude <= killAuraRadius then
                            pcall(function()
                                remoteEvents.ToolDamageObject:InvokeServer(
                                    mob,
                                    tool,
                                    damageID,
                                    CFrame.new(part.Position)
                                )
                            end)
                        end
                    end
                end
            end
            task.wait(0.1)
        else
            task.wait(1)
        end
    end
end

-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- üé® CREAR TABS DE LA INTERFAZ
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

-- üè† TAB: PRINCIPAL
local MainTab = Window:CreateTab("üè† Principal")



MainTab:CreateSection("‚ö° Acciones R√°pidas")

MainTab:CreateButton({
    Name = "Inmortalidad / God Mode",
    Callback = function()
        local Event = game:GetService("ReplicatedStorage").RemoteEvents.DamagePlayer
        Event:FireServer(-math.huge)
    end
})


MainTab:CreateButton({
    Name = "üì¶ Recolectar Items Cercanos",
    Callback = function()
        autoCollectItems()
    end
})

MainTab:CreateButton({
    Name = "üè† Ir al Spawn",
    Callback = function()
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            notify("‚ùå Error", "Personaje no encontrado", 2)
            return
        end
        
        local spawnPoint = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("SpawnLocation")
        if spawnPoint then
            character.HumanoidRootPart.CFrame = spawnPoint.CFrame + Vector3.new(0, 5, 0)
            notify("‚úÖ Teletransporte", "Al spawn", 2)
        else
            character.HumanoidRootPart.CFrame = CFrame.new(0, 50, 0)
            notify("‚úÖ Teletransporte", "Al spawn (coords alternativas)", 2)
        end
    end
})

MainTab:CreateButton({
    Name = "‚ö° Abrir Cofres R√°pido",
    Callback = function()
        for i,v in pairs(workspace:GetDescendants()) do
            if v:IsA("ProximityPrompt") then
                v.HoldDuration = 0
            end
        end
        
        game:GetService("ProximityPromptService").PromptButtonHoldBegan:Connect(function(v)
            v.HoldDuration = 0
        end)
        
        notify("‚úÖ Cofres R√°pidos", "Ahora se abren instant√°neamente", 3)
    end
})

-- Safe Zone
MainTab:CreateSection("üåç Safe Zone")

local safezoneBaseplates = {}
local baseplateSize = Vector3.new(2048, 1, 2048)
local baseY = 100
local centerPos = Vector3.new(0, baseY, 0)

for dx = -1, 1 do
    for dz = -1, 1 do
        local pos = centerPos + Vector3.new(dx * baseplateSize.X, 0, dz * baseplateSize.Z)
        local baseplate = Instance.new("Part")
        baseplate.Name = "SafeZoneBaseplate"
        baseplate.Size = baseplateSize
        baseplate.Position = pos
        baseplate.Anchored = true
        baseplate.CanCollide = true
        baseplate.Transparency = 1
        baseplate.Color = Color3.fromRGB(255, 255, 255)
        baseplate.Parent = workspace
        table.insert(safezoneBaseplates, baseplate)
    end
end

MainTab:CreateToggle({
    Name = "Mostrar Safe Zone",
    CurrentValue = false,
    Callback = function(enabled)
        for _, baseplate in ipairs(safezoneBaseplates) do
            baseplate.Transparency = enabled and 0.8 or 1
            baseplate.CanCollide = enabled
        end
        
        notify("Safe Zone", enabled and "Safe Zone visible" or "Safe Zone oculta", 3)
    end
})

-- Stronghold
MainTab:CreateSection("üè∞ Stronghold")

MainTab:CreateButton({
    Name = "üè∞ TP a Stronghold",
    Callback = function()
        local success, result = pcall(function()
            local targetPart = workspace.Map.Landmarks.Stronghold.Functional.EntryDoors.DoorRight.Model
            if targetPart then
                local children = targetPart:GetChildren()
                local destination = children[5]

                if destination and destination:IsA("BasePart") then
                    local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        hrp.CFrame = destination.CFrame + Vector3.new(0, 5, 0)
                        return true
                    end
                end
            end
            return false
        end)
        
        if success and result then
            notify("Teleport", "Teletransportado al Stronghold", 3)
        else
            notify("Error", "No se pudo encontrar el Stronghold", 3)
        end
    end
})

MainTab:CreateButton({
    Name = "üíé TP a Diamond Chest",
    Callback = function()
        local success, result = pcall(function()
            local items = workspace:FindFirstChild("Items")
            if not items then return false end

            local chest = items:FindFirstChild("Stronghold Diamond Chest")
            if not chest then return false end

            local chestLid = chest:FindFirstChild("ChestLid")
            if not chestLid then return false end

            local diamondchest = chestLid:FindFirstChild("Meshes/diamondchest_Cube.002")
            if not diamondchest then return false end

            local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                hrp.CFrame = diamondchest.CFrame + Vector3.new(0, 5, 0)
                return true
            end
            return false
        end)
        
        if success and result then
            notify("Teleport", "Teletransportado al Diamond Chest", 3)
        else
            notify("Error", "No se encontr√≥ el Diamond Chest", 3)
        end
    end
})

-- Combat System
MainTab:CreateSection("‚öîÔ∏è Sistema de Combate")

MainTab:CreateToggle({
    Name = "‚öîÔ∏è Kill Aura",
    CurrentValue = false,
    Callback = function(state)
        killAuraEnabled = state
        if state then
            task.spawn(killAuraLoop)
            notify("Kill Aura", "Kill Aura activado - Radio: " .. killAuraRadius, 3)
        else
            local tool, _ = getAnyToolWithDamageID()
            if tool then unequipTool(tool) end
            notify("Kill Aura", "Kill Aura desactivado", 2)
        end
    end
})

MainTab:CreateSlider({
    Name = "Radio de Kill Aura",
    Range = {20, 1000},
    Increment = 5,
    CurrentValue = 200,
    Suffix = " studs",
    Callback = function(value)
        killAuraRadius = value
    end
})

MainTab:CreateToggle({
    Name = "üñ±Ô∏è Auto-Click",
    CurrentValue = false,
    Callback = function(state)
        toggleAutoClick(state)
    end
})

-- Desbloquear Mapa
local unlockingMap = false
local originalCFrame = nil
local unlockThread = nil

MainTab:CreateToggle({
    Name = "üåç Desbloquear Mapa",
    CurrentValue = false,
    Callback = function(state)
        unlockingMap = state

        if unlockingMap then
            if character and character:FindFirstChild("HumanoidRootPart") then
                originalCFrame = character.HumanoidRootPart.CFrame
            else
                notify("‚ùå Error", "Personaje no encontrado", 2)
                unlockingMap = false
                return
            end

            local centerPos
            local map = workspace:FindFirstChild("Map")
            if map and map:FindFirstChild("SpawnLocation") then
                centerPos = map.SpawnLocation.Position
            else
                centerPos = Vector3.new(0, 0, 0)
            end

            unlockThread = task.spawn(function()
                local root = character:WaitForChild("HumanoidRootPart")
                local angle = 0
                local radius = 150
                local height = 200
                local angularSpeed = 0.9
                local radiusGrowth = 0.9

                local startTime = tick()
                while unlockingMap and root do
                    if tick() - startTime >= 55 then
                        unlockingMap = false
                        break
                    end

                    local x = centerPos.X + math.cos(angle) * radius
                    local z = centerPos.Z + math.sin(angle) * radius
                    local y = centerPos.Y + height

                    root.CFrame = CFrame.new(Vector3.new(x, y, z), centerPos)

                    angle += angularSpeed
                    radius += radiusGrowth

                    task.wait(0.03)
                end

                if originalCFrame and character and character:FindFirstChild("HumanoidRootPart") then
                    character.HumanoidRootPart.CFrame = originalCFrame
                    notify("‚úÖ Desbloqueo Completado", "Exploraci√≥n finalizada autom√°ticamente", 3)
                end
            end)
        else
            if unlockThread then
                task.cancel(unlockThread)
                unlockThread = nil
            end

            if originalCFrame and character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = originalCFrame
                notify("‚úÖ Desbloqueo Finalizado", "Mapa recorrido completamente", 3)
            else
                notify("‚ö†Ô∏è Aviso", "No se pudo regresar a la posici√≥n original", 2)
            end
        end
    end
})

-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- üéÆ TAB: JUGADOR
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

local PlayerTab = Window:CreateTab("üéÆ Jugador")

PlayerTab:CreateSection("‚öôÔ∏è Modificadores del Jugador")

-- Sistema de WalkSpeed persistente
_G.HackedWalkSpeed = _G.HackedWalkSpeed or 16

local function applyWalkSpeed(hum)
    if not hum then return end
    hum.WalkSpeed = _G.HackedWalkSpeed
    
    hum:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
        if hum.WalkSpeed ~= _G.HackedWalkSpeed then
            hum.WalkSpeed = _G.HackedWalkSpeed
        end
    end)
end

if player.Character and player.Character:FindFirstChild("Humanoid") then
    applyWalkSpeed(player.Character.Humanoid)
end

player.CharacterAdded:Connect(function(char)
    local hum = char:WaitForChild("Humanoid", 5)
    if hum then
        applyWalkSpeed(hum)
    end
end)

PlayerTab:CreateSlider({
    Name = "üèÉ Velocidad de Caminata",
    Range = {16, 700},
    Increment = 1,
    Suffix = " studs/s",
    CurrentValue = originalWalkSpeed,
    Callback = function(value)
        _G.HackedWalkSpeed = value
        if humanoid then
            applyWalkSpeed(humanoid)
        end
    end
})

PlayerTab:CreateToggle({
    Name = "‚ö° Velocidad R√°pida (50)",
    CurrentValue = false,
    Callback = function(toggle)
        _G.HackedWalkSpeed = toggle and 50 or 16
        
        local char = player.Character
        if char and char:FindFirstChild("Humanoid") then
            applyWalkSpeed(char.Humanoid)
        end
    end
})

PlayerTab:CreateSlider({
    Name = "ü¶ò Poder de Salto",
    Range = {50, 700},
    Increment = 5,
    CurrentValue = 50,
    Suffix = " poder",
    Callback = function(value)
        local char = player.Character
        if char and char:FindFirstChild("Humanoid") then
            char.Humanoid.JumpPower = value
        end
    end
})

PlayerTab:CreateToggle({
    Name = "üåü Salto Infinito",
    CurrentValue = false,
    Callback = function(state)
        toggleInfiniteJump(state)
    end
})

PlayerTab:CreateSection("üöÄ Habilidades Especiales")

PlayerTab:CreateToggle({
    Name = "‚úàÔ∏è Modo Vuelo",
    CurrentValue = false,
    Callback = function(state)
        toggleFly(state)
    end
})

PlayerTab:CreateSlider({
    Name = "‚ö° Velocidad de Vuelo",
    Range = {10, 200},
    Increment = 5,
    Suffix = " velocidad",
    CurrentValue = 50,
    Callback = function(value)
        flySpeed = value
    end
})

PlayerTab:CreateToggle({
    Name = "üö∂ Noclip (Atravesar Paredes)",
    CurrentValue = false,
    Callback = function(state)
        toggleNoclip(state)
    end
})

PlayerTab:CreateToggle({
    Name = "üí§ Anti-AFK",
    CurrentValue = false,
    Callback = function(state)
        toggleAntiAFK(state)
    end
})

-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- üì¶ TAB: ITEMS
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

local ItemsTab = Window:CreateTab("üì¶ Items")

ItemsTab:CreateSection("üîç Gesti√≥n de Items")

ItemsTab:CreateParagraph({
    Title = "‚ÑπÔ∏è Instrucciones",
    Content = "Usa los men√∫s desplegables para seleccionar items, cofres, NPCs o Lost Childs."
})

-- Variables para dropdowns
local currentSelectedItem = nil
local currentSelectedChest = nil
local currentSelectedNPC = nil
local currentSelectedLostChild = nil
local itemDropdownOptions = {"Cargando items..."}
local chestDropdownOptions = {"Cargando cofres..."}
local npcDropdownOptions = {"Cargando NPCs..."}
local lostChildDropdownOptions = {"Cargando LostChilds..."}

-- Funci√≥n para obtener listas de items y cofres
local function getItemLists()
    local itemsFolder = workspace:FindFirstChild("Items")
    if not itemsFolder then
        return {"No hay items"}, {"No hay cofres"}
    end

    local itemNames = {}
    local chestNames = {}
    local uniqueItems = {}

    for _, item in ipairs(itemsFolder:GetChildren()) do
        local nameLower = item.Name:lower()
        if nameLower:find("chest") or nameLower:find("cofre") then
            table.insert(chestNames, item.Name)
        else
            if not uniqueItems[item.Name] then
                uniqueItems[item.Name] = true
                table.insert(itemNames, item.Name)
            end
        end
    end

    table.sort(itemNames)
    table.sort(chestNames)
    return (#itemNames > 0 and itemNames or {"No hay items"}),
           (#chestNames > 0 and chestNames or {"No hay cofres"})
end

-- Funci√≥n para obtener lista de NPCs
local function getNPCList()
    local npcsFolder = workspace:FindFirstChild("Characters")
    if not npcsFolder then return {"No hay NPCs"} end
    
    local npcNames = {}
    local uniqueNPCs = {}
    
    for _, npc in ipairs(npcsFolder:GetChildren()) do
        local nameLower = npc.Name:lower()
        if not (nameLower:find("lost") or nameLower:find("child")) then
            if not uniqueNPCs[npc.Name] then
                uniqueNPCs[npc.Name] = true
                table.insert(npcNames, npc.Name)
            end
        end
    end
    
    table.sort(npcNames)
    return #npcNames > 0 and npcNames or {"No hay NPCs"}
end

-- Funci√≥n para obtener Lost Childs
local function getLostChildList()
    local charactersFolder = workspace:FindFirstChild("Characters")
    if not charactersFolder then return {"No hay LostChilds"} end

    local lostList = {}
    local uniqueNames = {}

    for _, npc in ipairs(charactersFolder:GetChildren()) do
        local nameLower = npc.Name:lower()
        if nameLower:find("lost") or nameLower:find("child") then
            if not uniqueNames[npc.Name] then
                uniqueNames[npc.Name] = true
                table.insert(lostList, npc.Name)
            end
        end
    end

    table.sort(lostList)
    return #lostList > 0 and lostList or {"No hay LostChilds"}
end

-- Actualizar listas iniciales
itemDropdownOptions, chestDropdownOptions = getItemLists()
npcDropdownOptions = getNPCList()
lostChildDropdownOptions = getLostChildList()

-- Dropdown de Items
local ItemsDropdown = ItemsTab:CreateDropdown({
    Name = "üì¶ Seleccionar Item",
    Options = itemDropdownOptions,
    Callback = function(selectedItem)
        if selectedItem == "No hay items" or selectedItem == "Cargando items..." then return end
        currentSelectedItem = selectedItem
        notify("üì¶ Item Seleccionado", selectedItem, 2)
    end
})

ItemsTab:CreateButton({
    Name = "üìç Teleport al Item Seleccionado",
    Callback = function()
        if not currentSelectedItem then
            notify("‚ö†Ô∏è Aviso", "Selecciona un item primero", 2)
            return
        end
        
        local itemsFolder = workspace:FindFirstChild("Items")
        if not itemsFolder then
            notify("‚ùå Error", "Carpeta 'Items' no encontrada", 2)
            return
        end
        
        for _, item in ipairs(itemsFolder:GetChildren()) do
            if item.Name == currentSelectedItem then
                teleportToItem(item)
                return
            end
        end
        
        notify("‚ùå Error", "Item no encontrado", 2)
    end
})

ItemsTab:CreateButton({
    Name = "üéØ Traer Item Seleccionado (uno)",
    Callback = function()
        if not currentSelectedItem then
            notify("‚ö†Ô∏è Aviso", "Selecciona un item primero", 2)
            return
        end
        
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            notify("‚ùå Error", "Personaje no encontrado", 2)
            return
        end
        
        local root = character.HumanoidRootPart
        local itemsFolder = workspace:FindFirstChild("Items")
        if not itemsFolder then
            notify("‚ùå Error", "Carpeta 'Items' no encontrada", 2)
            return
        end
        
        for _, item in ipairs(itemsFolder:GetChildren()) do
            if item.Name == currentSelectedItem then
                moveItemToPos(item, root.Position + Vector3.new(0, 5, 0))
                notify("‚úÖ Item Tra√≠do", currentSelectedItem, 2)
                return
            end
        end
        
        notify("‚ùå Error", "Item no encontrado", 2)
    end
})

ItemsTab:CreateButton({
    Name = "üì¶ Traer TODOS los Items del Mismo Tipo",
    Callback = function()
        if not currentSelectedItem then
            notify("‚ö†Ô∏è Aviso", "Selecciona un item primero", 2)
            return
        end
        
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            notify("‚ùå Error", "Personaje no encontrado", 2)
            return
        end

        local root = character.HumanoidRootPart
        local itemsFolder = workspace:FindFirstChild("Items")
        if not itemsFolder then
            notify("‚ùå Error", "Carpeta 'Items' no encontrada", 2)
            return
        end

        local targetName = currentSelectedItem:lower()
        local itemsBrought = 0

        for _, obj in ipairs(itemsFolder:GetChildren()) do
            if obj.Name:lower() == targetName then
                moveItemToPos(obj, root.Position + Vector3.new(math.random(-5,5), 5, math.random(-5,5)))
                itemsBrought = itemsBrought + 1
                task.wait(0.1)
            end
        end

        notify("‚úÖ Items Tra√≠dos", "'" .. currentSelectedItem .. "': " .. itemsBrought, 2)
    end
})

ItemsTab:CreateSection("")

ItemsTab:CreateButton({
    Name = "üåü Traer TODOS los Items (sin cofres)",
    Callback = function()
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            notify("‚ùå Error", "Personaje no encontrado", 2)
            return
        end

        local root = character.HumanoidRootPart
        local itemsFolder = workspace:FindFirstChild("Items")
        if not itemsFolder then
            notify("‚ùå Error", "Carpeta 'Items' no encontrada", 2)
            return
        end

        local itemsBrought = 0
        for _, item in ipairs(itemsFolder:GetChildren()) do
            local nameLower = item.Name:lower()
            if not (nameLower:find("chest") or nameLower:find("cofre")) then
                moveItemToPos(item, root.Position + Vector3.new(math.random(-5,5), 5, math.random(-5,5)))
                itemsBrought = itemsBrought + 1
                task.wait(0.05)
            end
        end

        notify("‚úÖ Items Tra√≠dos", "Total: " .. itemsBrought .. " (sin cofres)", 3)
    end
})

-- === Cofres ===
ItemsTab:CreateSection("üí∞ Cofres")

local ChestDropdown = ItemsTab:CreateDropdown({
    Name = "üíé Seleccionar Cofre",
    Options = chestDropdownOptions,
    Callback = function(selectedChest)
        if selectedChest == "No hay cofres" or selectedChest == "Cargando cofres..." then return end
        currentSelectedChest = selectedChest
        notify("üí∞ Cofre Seleccionado", selectedChest, 2)
    end
})

ItemsTab:CreateButton({
    Name = "üìç Teleport al Cofre Seleccionado",
    Callback = function()
        if not currentSelectedChest then
            notify("‚ö†Ô∏è Aviso", "Selecciona un cofre primero", 2)
            return
        end

        local itemsFolder = workspace:FindFirstChild("Items")
        if not itemsFolder then
            notify("‚ùå Error", "Carpeta 'Items' no encontrada", 2)
            return
        end

        for _, chest in ipairs(itemsFolder:GetChildren()) do
            if chest.Name == currentSelectedChest then
                teleportToItem(chest)
                return
            end
        end

        notify("‚ùå Error", "Cofre no encontrado", 2)
    end
})

local randomChestTPEnabled = false
local randomChestTPThread = nil

ItemsTab:CreateToggle({
    Name = "üé≤ TP Aleatorio a Cofres",
    CurrentValue = false,
    Callback = function(state)
        randomChestTPEnabled = state

        if randomChestTPEnabled then
            if randomChestTPThread then
                task.cancel(randomChestTPThread)
            end

            randomChestTPThread = task.spawn(function()
                while randomChestTPEnabled do
                    local itemsFolder = workspace:FindFirstChild("Items")
                    if itemsFolder then
                        local chests = {}
                        for _, chest in ipairs(itemsFolder:GetChildren()) do
                            local nameLower = chest.Name:lower()
                            if nameLower:find("chest") or nameLower:find("cofre") then
                                table.insert(chests, chest)
                            end
                        end

                        if #chests > 0 then
                            local chest = chests[math.random(1, #chests)]
                            teleportToItem(chest)
                        else
                            notify("‚ö†Ô∏è Aviso", "No se encontraron cofres", 2)
                        end
                    end
                    task.wait(1)
                end
            end)

            notify("‚úÖ TP Aleatorio", "Se activ√≥ el teleport a cofres cada 1s", 3)
        else
            if randomChestTPThread then
                task.cancel(randomChestTPThread)
                randomChestTPThread = nil
            end
            notify("‚ùå TP Aleatorio", "Se desactiv√≥ el teleport", 2)
        end
    end
})

-- === NPCs ===
ItemsTab:CreateSection("üëæ Gesti√≥n de NPCs")

local NPCDropdown = ItemsTab:CreateDropdown({
    Name = "üëæ Seleccionar NPC",
    Options = npcDropdownOptions,
    Callback = function(selectedNPC)
        if selectedNPC == "No hay NPCs" or selectedNPC == "Cargando NPCs..." then return end
        currentSelectedNPC = selectedNPC
        notify("üëæ NPC Seleccionado", selectedNPC, 2)
    end
})

ItemsTab:CreateButton({
    Name = "üìç Teleport al NPC Seleccionado",
    Callback = function()
        if not currentSelectedNPC then
            notify("‚ö†Ô∏è Aviso", "Selecciona un NPC primero", 2)
            return
        end
        
        local npcsFolder = workspace:FindFirstChild("Characters")
        if not npcsFolder then
            notify("‚ùå Error", "Carpeta 'Characters' no encontrada", 2)
            return
        end
        
        for _, npc in ipairs(npcsFolder:GetChildren()) do
            if npc.Name == currentSelectedNPC then
                local part = getItemPart(npc)
                if part and character and character:FindFirstChild("HumanoidRootPart") then
                    character.HumanoidRootPart.CFrame = part.CFrame + Vector3.new(0, 5, 0)
                    notify("‚úÖ Teleport a NPC", currentSelectedNPC, 2)
                    return
                end
            end
        end
        
        notify("‚ùå Error", "NPC no encontrado", 2)
    end
})

ItemsTab:CreateButton({
    Name = "üéØ Traer NPC Seleccionado",
    Callback = function()
        if not currentSelectedNPC then
            notify("‚ö†Ô∏è Aviso", "Selecciona un NPC primero", 2)
            return
        end
        
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            notify("‚ùå Error", "Personaje no encontrado", 2)
            return
        end
        
        local root = character.HumanoidRootPart
        local npcsFolder = workspace:FindFirstChild("Characters")
        if not npcsFolder then
            notify("‚ùå Error", "Carpeta 'Characters' no encontrada", 2)
            return
        end
        
        for _, npc in ipairs(npcsFolder:GetChildren()) do
            if npc.Name == currentSelectedNPC then
                local part = getItemPart(npc)
                if part then
                    if npc.PrimaryPart then
                        pcall(function()
                            npc:SetPrimaryPartCFrame(root.CFrame + Vector3.new(0, 5, 0))
                        end)
                    else
                        pcall(function()
                            part.CFrame = root.CFrame + Vector3.new(0, 5, 0)
                        end)
                    end
                    notify("‚úÖ NPC Tra√≠do", currentSelectedNPC, 2)
                    return
                end
            end
        end
        
        notify("‚ùå Error", "NPC no encontrado", 2)
    end
})

ItemsTab:CreateButton({
    Name = "üëæ Traer TODOS los NPCs del Mismo Tipo",
    Callback = function()
        if not currentSelectedNPC then
            notify("‚ö†Ô∏è Aviso", "Selecciona un NPC primero", 2)
            return
        end
        
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            notify("‚ùå Error", "Personaje no encontrado", 2)
            return
        end
        
        local root = character.HumanoidRootPart
        local npcsFolder = workspace:FindFirstChild("Characters")
        if not npcsFolder then
            notify("‚ùå Error", "Carpeta 'Characters' no encontrada", 2)
            return
        end
        
        local targetName = currentSelectedNPC:lower()
        local npcsBrought = 0
        
        for _, npc in ipairs(npcsFolder:GetChildren()) do
            if npc.Name:lower() == targetName then
                local part = getItemPart(npc)
                if part then
                    if npc.PrimaryPart then
                        pcall(function()
                            npc:SetPrimaryPartCFrame(root.CFrame + Vector3.new(math.random(-5,5), 5, math.random(-5,5)))
                        end)
                    else
                        pcall(function()
                            part.CFrame = root.CFrame + Vector3.new(math.random(-5,5), 5, math.random(-5,5))
                        end)
                    end
                    npcsBrought = npcsBrought + 1
                    task.wait(0.1)
                end
            end
        end
        
        notify("‚úÖ NPCs Tra√≠dos", "'" .. currentSelectedNPC .. "': " .. npcsBrought, 2)
    end
})

-- === Lost Childs ===
ItemsTab:CreateSection("üëª Lost Childs")

local LostChildDropdown = ItemsTab:CreateDropdown({
    Name = "üëª Seleccionar Lost Child",
    Options = lostChildDropdownOptions,
    Callback = function(selected)
        if selected == "No hay LostChilds" or selected == "Cargando LostChilds..." then return end
        currentSelectedLostChild = selected
        notify("üëª LostChild Seleccionado", selected, 2)
    end
})

ItemsTab:CreateButton({
    Name = "üìç Teleport al LostChild Seleccionado",
    Callback = function()
        if not currentSelectedLostChild then
            notify("‚ö†Ô∏è Aviso", "Selecciona un LostChild primero", 2)
            return
        end

        local charactersFolder = workspace:FindFirstChild("Characters")
        if not charactersFolder then
            notify("‚ùå Error", "Carpeta 'Characters' no encontrada", 2)
            return
        end

        for _, npc in ipairs(charactersFolder:GetChildren()) do
            local nameLower = npc.Name:lower()
            if (nameLower:find("lost") or nameLower:find("child")) and npc.Name == currentSelectedLostChild then
                local part = getItemPart(npc)
                if part and character and character:FindFirstChild("HumanoidRootPart") then
                    character.HumanoidRootPart.CFrame = part.CFrame + Vector3.new(0, 5, 0)
                    notify("‚úÖ Teletransportado", "A: " .. currentSelectedLostChild, 2)
                    return
                end
            end
        end

        notify("‚ùå Error", "LostChild no encontrado", 2)
    end
})

-- Sistema de actualizaci√≥n de dropdowns
local function safeUpdateDropdownOnClose(dropdown, newOptions)
    if dropdown and typeof(dropdown.UpdateOnClose) == "function" then
        dropdown:UpdateOnClose(newOptions)
    end
end

local function refreshAllDropdowns()
    local newItemList, newChestList = getItemLists()
    safeUpdateDropdownOnClose(ItemsDropdown, newItemList)
    safeUpdateDropdownOnClose(ChestDropdown, newChestList)
    safeUpdateDropdownOnClose(NPCDropdown, getNPCList())
    safeUpdateDropdownOnClose(LostChildDropdown, getLostChildList())
end

local pendingUpdate = false
local function scheduleUpdate()
    if not pendingUpdate then
        pendingUpdate = true
        task.delay(1.5, function()
            refreshAllDropdowns()
            pendingUpdate = false
        end)
    end
end

if itemFolder then
    itemFolder.ChildAdded:Connect(scheduleUpdate)
    itemFolder.ChildRemoved:Connect(scheduleUpdate)
end

if characterFolder then
    characterFolder.ChildAdded:Connect(scheduleUpdate)
    characterFolder.ChildRemoved:Connect(scheduleUpdate)
end

task.delay(1, function()
    refreshAllDropdowns()
end)




-- ============================================
-- ITEM ESP
-- ============================================


-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- üì¶ TAB: ITEMS ESPEC√çFICOS
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

local ItemTab = Window:CreateTab("üì¶ Items Espec√≠ficos")

-- ============================================
-- TELEPORT TO ITEM
-- ============================================
ItemTab:CreateSection("üìç Teleport a Items Espec√≠ficos")

local itemList = {
    "Revolver", "MedKit", "Alien Chest", "Berry", "Bolt", "Broken Fan",
    "Carrot", "Coal", "Coin Stack", "Hologram Emitter", "Item Chest",
    "Laser Fence Blueprint", "Log", "Old Flashlight", "Old Radio",
    "Sheet Metal", "Bandage", "Rifle"
}

local function getModelPart(model)
    if model.PrimaryPart then
        return model.PrimaryPart
    end
    for _, part in pairs(model:GetChildren()) do
        if part:IsA("BasePart") then
            return part
        end
    end
    return nil
end

ItemTab:CreateDropdown({
    Name = "üìç Teleport a Item",
    Options = itemList,
    Callback = function(itemName)
        local candidates = {}
        for _, model in pairs(itemFolder:GetChildren()) do
            if model:IsA("Model") and model.Name == itemName then
                local part = getModelPart(model)
                if part then
                    table.insert(candidates, part)
                end
            end
        end

        if #candidates == 0 then
            notify("‚ùå Error", "No se encontr√≥: " .. itemName, 3)
            return
        end

        local targetPart = candidates[math.random(1, #candidates)]
        local character = player.Character
        if character then
            local hrp = character:FindFirstChild("HumanoidRootPart")
            if hrp then
                hrp.CFrame = targetPart.CFrame + Vector3.new(0, 5, 0)
                notify("‚úÖ Teleport", "Teletransportado a " .. itemName, 2)
            end
        end
    end
})

-- ============================================
-- BRING ITEM TO YOU (BULK)
-- ============================================
ItemTab:CreateSection("üéØ Traer Items a Ti")

local possibleItems = {
    "Alien Chest", "Alpha Wolf Pelt", "Anvil Front", "Anvil Back", "Apple",
    "Bandage", "Bear Corpse", "Bear Pelt", "Berry", "Biofuel", "Bolt",
    "Broken Fan", "Bunny Foot", "Carrot", "Coal", "Coin Stack",
    "Cooked Morsel", "Cooked Steak", "Chainsaw", "Cultist", "Cultist Gem",
    "Flower", "Fuel Canister", "Hologram Emitter", "Item Chest",
    "Laser Fence Blueprint", "Leather Body", "Iron Body", "Thorn Body",
    "Log", "MedKit", "Morsel", "Old Flashlight", "Old Radio",
    "Good Sack", "Good Axe", "Raygun", "Giant Sack", "Strong Axe",
    "Oil Barrel", "Old Car Engine", "Rifle", "Rifle Ammo", "Revolver",
    "Revolver Ammo", "Sapling", "Sheet Metal", "Steak", "Wolf Pelt",
    "Gem of the Forest Fragment", "Tyre", "Washing Machine", "Broken Microwave"
}

ItemTab:CreateDropdown({
    Name = "üéØ Traer Item (Todos)",
    Options = possibleItems,
    Callback = function(itemName)
        local character = player.Character
        if not character then 
            notify("‚ùå Error", "Personaje no encontrado", 2)
            return 
        end
        
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if not rootPart then 
            notify("‚ùå Error", "HumanoidRootPart no encontrado", 2)
            return 
        end
        
        local stackOffsetY = 2
        local count = 0
        
        local sources = {
            itemFolder,
            ReplicatedStorage:FindFirstChild("TempStorage")
        }

        for _, source in ipairs(sources) do
            if source then
                for _, item in ipairs(source:GetChildren()) do
                    if item.Name == itemName then
                        local targetPart = nil

                        -- Caso especial para Berry
                        if itemName == "Berry" then
                            targetPart = item:FindFirstChild("Handle")
                            if not targetPart then
                                for _, child in ipairs(item:GetDescendants()) do
                                    if child:IsA("MeshPart") or child:IsA("Part") or child:IsA("UnionOperation") then
                                        targetPart = child
                                        break
                                    end
                                end
                            end
                        else
                            -- Para otros items
                            for _, child in ipairs(item:GetDescendants()) do
                                if child:IsA("MeshPart") or child:IsA("Part") then
                                    targetPart = child
                                    break
                                end
                            end
                        end

                        if targetPart then
                            pcall(function()
                                remoteEvents.RequestStartDraggingItem:FireServer(item)
                                task.wait(0.05)
                                local offset = Vector3.new(
                                    math.random(-2, 2), 
                                    count * stackOffsetY, 
                                    math.random(-2, 2)
                                )
                                targetPart.CFrame = rootPart.CFrame + offset
                                task.wait(0.05)
                                remoteEvents.StopDraggingItem:FireServer(item)
                            end)
                            count = count + 1
                        end
                    end
                end
            end
        end
        
        if count > 0 then
            notify("‚úÖ Items Tra√≠dos", string.format("Se trajeron %d %s", count, itemName), 3)
        else
            notify("‚ö†Ô∏è Aviso", "No se encontr√≥ ning√∫n " .. itemName, 2)
        end
    end
})

-- ============================================
-- ITEM CATEGORIES
-- ============================================
ItemTab:CreateSection("üìÅ Traer por Categor√≠a")

local bracket = {
    weapons = {"Laser Sword", "Rifle", "Revolver", "Raygun", "Tactical Shotgun", "Kunai", "Katana", "Spear"},
    minifoods = {"Apple", "Berry", "Carrot"},
    meat = {"Steak", "Cooked Steak", "Cooked Morsel", "Morsel"},
    armor = {"Leather Body", "Iron Body", "Thorn Body"},
    guns_ammo = {"Tactical Shotgun", "Revolver Ammo", "Rifle Ammo"},
    materials = {"Log", "Coal", "Fuel Canister", "UFO Junk", "UFO Component", "Bandage", "MedKit", "Old Car Engine", "Broken Fan", "Old Microwave", "Old Radio", "Sheet Metal"},
    pelts = {"Alpha Wolf Pelt", "Bear Pelt", "Wolf Pelt", "Bunny Foot"},
    misc_tools = {"Good Sack", "Old Flashlight", "Old Radio", "Giant Sack", "Strong Flashlight", "Chainsaw"}
}

local function findTeleportablePart(item)
    -- Primero buscar PrimaryPart
    if item.PrimaryPart then
        return item.PrimaryPart
    end
    
    -- Buscar Handle
    local handle = item:FindFirstChild("Handle")
    if handle and handle:IsA("BasePart") then
        return handle
    end
    
    -- Buscar cualquier BasePart
    for _, descendant in ipairs(item:GetDescendants()) do
        if descendant:IsA("BasePart") then
            return descendant
        end
    end
    
    return nil
end

local function teleportItemCategory(itemName)
    local character = player.Character
    if not character then 
        notify("‚ùå Error", "Personaje no encontrado", 2)
        return 
    end
    
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then 
        notify("‚ùå Error", "HumanoidRootPart no encontrado", 2)
        return 
    end
    
    local stackOffsetY = 2
    local count = 0

    for _, item in ipairs(itemFolder:GetChildren()) do
        if item.Name == itemName then
            local targetPart = findTeleportablePart(item)
            if targetPart then
                pcall(function()
                    remoteEvents.RequestStartDraggingItem:FireServer(item)
                    task.wait(0.05)
                    local offset = Vector3.new(
                        math.random(-3, 3), 
                        count * stackOffsetY, 
                        math.random(-3, 3)
                    )
                    targetPart.CFrame = rootPart.CFrame + offset
                    task.wait(0.05)
                    remoteEvents.StopDraggingItem:FireServer(item)
                end)
                count = count + 1
            end
        end
    end
    
    if count > 0 then
        notify("‚úÖ Categor√≠a Tra√≠da", string.format("Se trajeron %d %s", count, itemName), 3)
    else
        notify("‚ö†Ô∏è Aviso", "No se encontr√≥ ning√∫n " .. itemName, 2)
    end
end

-- Crear dropdown por cada categor√≠a
for groupName, itemList in pairs(bracket) do
    local label = groupName:gsub("_", " "):gsub("(%a)([%w_']*)", function(first, rest)
        return first:upper() .. rest:lower()
    end)
    
    ItemTab:CreateDropdown({
        Name = "üìÅ " .. label,
        Options = itemList,
        Callback = function(itemName)
            teleportItemCategory(itemName)
        end
    })
end

ItemTab:CreateSection("‚ÑπÔ∏è Informaci√≥n")

ItemTab:CreateParagraph({
    Title = "üí° Uso de Items Espec√≠ficos",
    Content = "‚Ä¢ Teleport: Te lleva directamente al item\n‚Ä¢ Traer Bulk: Trae TODOS los items del mismo tipo\n‚Ä¢ Categor√≠as: Trae items organizados por tipo"
})


-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- üîÑ TAB: AUTO FARM
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

local AutoTab = Window:CreateTab("üîÑ Auto Farm")

AutoTab:CreateSection("Sistema de Auto Farm")

AutoTab:CreateParagraph({
    Title = "Informaci√≥n",
    Content = "Sistema completo de automatizaci√≥n para fogata, cocina, m√°quina de moler y m√°s"
})

-- Listas de items
local campfireFuelItems = {"Log", "Coal", "Fuel Canister", "Oil Barrel", "Biofuel"}
local autocookItems = {"Morsel", "Steak"}
local autoGrindItems = {
    "UFO Junk", "UFO Component", "Old Car Engine", "Broken Fan", 
    "Old Microwave", "Bolt", "Log", "Cultist Gem", "Sheet Metal", 
    "Old Radio", "Tyre", "Washing Machine", "Cultist Experiment", 
    "Cultist Component", "Gem of the Forest Fragment", "Broken Microwave"
}
local autoEatFoods = {"Cooked Steak", "Cooked Morsel", "Berry", "Carrot", "Apple"}
local biofuelItems = {"Carrot", "Cooked Morsel", "Morsel", "Steak", "Cooked Steak", "Log"}

-- Estados de toggles
local autoFuelEnabledItems = {}
local autoCookEnabledItems = {}
local autoGrindEnabledItems = {}
local autoEatEnabled = false
local autoEatHPEnabled = false
local autoBiofuelEnabledItems = {}
local alwaysFeedEnabledItems = {}

-- AUTO FEED CAMPFIRE (ALWAYS)
AutoTab:CreateSection("üî• Auto Alimentar fogata (Siempre)")

AutoTab:CreateParagraph({
    Title = "Modo Siempre Activo",
    Content = "Alimenta la fogata constantemente sin importar su nivel de salud."
})

for _, itemName in ipairs(campfireFuelItems) do
    AutoTab:CreateToggle({
        Name = "Siempre tirar: " .. itemName,
        CurrentValue = false,
        Callback = function(checked)
            alwaysFeedEnabledItems[itemName] = checked
        end
    })
end

coroutine.wrap(function()
    while true do
        for itemName, enabled in pairs(alwaysFeedEnabledItems) do
            if enabled then
                for _, item in ipairs(itemFolder:GetChildren()) do
                    if item.Name == itemName then
                        moveItemToPos(item, campfireDropPos)
                        task.wait(0.1)
                    end
                end
            end
        end
        task.wait(2)
    end
end)()

-- AUTO FEED CAMPFIRE (HP BASED)
AutoTab:CreateSection("üî• Auto Alimentar fogata si baja a 70%")

AutoTab:CreateParagraph({
    Title = "Modo Basado en HP",
    Content = "Solo alimenta cuando la fogata baja del 70% de salud."
})

for _, itemName in ipairs(campfireFuelItems) do
    AutoTab:CreateToggle({
        Name = "HP Feed: " .. itemName,
        CurrentValue = false,
        Callback = function(checked)
            autoFuelEnabledItems[itemName] = checked
        end
    })
end

coroutine.wrap(function()
    task.wait(2)
    local success, campfire = pcall(function()
        return workspace:WaitForChild("Map"):WaitForChild("Campground"):WaitForChild("MainFire")
    end)
    
    if not success or not campfire then return end
    
    local fillFrame = campfire.Center.BillboardGui.Frame.Background.Fill
    
    while true do
        local success2, healthPercent = pcall(function()
            return fillFrame.Size.X.Scale
        end)
        
        if success2 and healthPercent < 0.7 then
            repeat
                for itemName, enabled in pairs(autoFuelEnabledItems) do
                    if enabled then
                        for _, item in ipairs(itemFolder:GetChildren()) do
                            if item.Name == itemName then
                                moveItemToPos(item, campfireDropPos)
                                task.wait(0.1)
                            end
                        end
                    end
                end
                task.wait(0.5)
                success2, healthPercent = pcall(function()
                    return fillFrame.Size.X.Scale
                end)
            until (success2 and healthPercent >= 1) or not success2
        end
        task.wait(2)
    end
end)()

-- AUTO COOK
AutoTab:CreateSection("üçñ Auto Cocinar")

AutoTab:CreateParagraph({
    Title = "Auto Cocinar",
    Content = "Cocina autom√°ticamente carne en la fogata."
})

for _, itemName in ipairs(autocookItems) do
    AutoTab:CreateToggle({
        Name = "Cocinar: " .. itemName,
        CurrentValue = false,
        Callback = function(checked)
            autoCookEnabledItems[itemName] = checked
        end
    })
end

coroutine.wrap(function()
    while true do
        for itemName, enabled in pairs(autoCookEnabledItems) do
            if enabled then
                for _, item in ipairs(itemFolder:GetChildren()) do
                    if item.Name == itemName then
                        moveItemToPos(item, campfireDropPos)
                        task.wait(0.1)
                    end
                end
            end
        end
        task.wait(2.5)
    end
end)()

-- AUTO GRIND MACHINE
AutoTab:CreateSection("‚öôÔ∏è Auto Moler")

AutoTab:CreateParagraph({
    Title = "Auto Moler",
    Content = "Muele items autom√°ticamente en la m√°quina."
})

for _, itemName in ipairs(autoGrindItems) do
    AutoTab:CreateToggle({
        Name = "Moler: " .. itemName,
        CurrentValue = false,
        Callback = function(checked)
            autoGrindEnabledItems[itemName] = checked
        end
    })
end

coroutine.wrap(function()
    while true do
        for itemName, enabled in pairs(autoGrindEnabledItems) do
            if enabled then
                for _, item in ipairs(itemFolder:GetChildren()) do
                    if item.Name == itemName then
                        moveItemToPos(item, machineDropPos)
                        task.wait(0.1)
                    end
                end
            end
        end
        task.wait(2.5)
    end
end)()

-- AUTO BIOFUEL PROCESSOR
AutoTab:CreateSection("‚öóÔ∏è Auto BioCombustible")

AutoTab:CreateParagraph({
    Title = "Procesador de BioCombustible",
    Content = "Procesa items autom√°ticamente en el procesador de BioCombustible."
})

for _, itemName in ipairs(biofuelItems) do
    AutoTab:CreateToggle({
        Name = "BioCombustible: " .. itemName,
        CurrentValue = false,
        Callback = function(checked)
            autoBiofuelEnabledItems[itemName] = checked
        end
    })
end

coroutine.wrap(function()
    local biofuelProcessorPos = nil
    
    while true do
        if not biofuelProcessorPos then
            local structures = workspace:FindFirstChild("Structures")
            if structures then
                local processor = structures:FindFirstChild("Biofuel Processor")
                if processor then
                    local part = processor:FindFirstChild("Part")
                    if part then
                        biofuelProcessorPos = part.Position + Vector3.new(0, 5, 0)
                    end
                end
            end
        end

        if biofuelProcessorPos then
            for itemName, enabled in pairs(autoBiofuelEnabledItems) do
                if enabled then
                    for _, item in ipairs(itemFolder:GetChildren()) do
                        if item.Name == itemName then
                            moveItemToPos(item, biofuelProcessorPos)
                            task.wait(0.1)
                        end
                    end
                end
            end
        end
        task.wait(2)
    end
end)()

-- AUTO EAT (INTERVAL)
AutoTab:CreateSection("üçΩÔ∏è Comer Autom√°tico")

AutoTab:CreateParagraph({
    Title = "Comer Autom√°tico",
    Content = "Come autom√°ticamente cada 3 segundos o basado en la barra de hambre."
})

local remoteConsume = remoteEvents:WaitForChild("RequestConsumeItem")

AutoTab:CreateToggle({
    Name = "Comer Autom√°tico (cada 3s)",
    CurrentValue = false,
    Callback = function(checked)
        autoEatEnabled = checked
    end
})

coroutine.wrap(function()
    while true do
        if autoEatEnabled then
            local available = {}
            for _, item in ipairs(itemFolder:GetChildren()) do
                if table.find(autoEatFoods, item.Name) then
                    table.insert(available, item)
                end
            end
            if #available > 0 then
                local food = available[math.random(1, #available)]
                pcall(function() 
                    remoteConsume:InvokeServer(food) 
                end)
            end
        end
        task.wait(3)
    end
end)()

-- AUTO EAT (HP BAR BASED)
AutoTab:CreateToggle({
    Name = "Auto comer (siempre al 100)",
    CurrentValue = false,
    Callback = function(checked)
        autoEatHPEnabled = checked
    end
})

coroutine.wrap(function()
    task.wait(2)
    local success, hungerBar = pcall(function()
        return player:WaitForChild("PlayerGui"):WaitForChild("Interface"):WaitForChild("StatBars"):WaitForChild("HungerBar"):WaitForChild("Bar")
    end)
    
    if not success or not hungerBar then return end
    
    while true do
        if autoEatHPEnabled then
            local success2, scale = pcall(function()
                return hungerBar.Size.X.Scale
            end)
            
            if success2 and scale <= 0.5 then
                repeat
                    local available = {}
                    for _, item in ipairs(itemFolder:GetChildren()) do
                        if item.Name and table.find(autoEatFoods, item.Name) then
                            table.insert(available, item)
                        end
                    end

                    if #available > 0 then
                        local food = available[math.random(1, #available)]
                        pcall(function()
                            remoteConsume:InvokeServer(food)
                        end)
                        task.wait(1)
                    else
                        break
                    end

                    success2, scale = pcall(function()
                        return hungerBar.Size.X.Scale
                    end)
                until (success2 and scale >= 0.99) or not autoEatHPEnabled
            end
        end
        task.wait(3)
    end
end)()

-- TREE TELEPORT SYSTEM
AutoTab:CreateSection("üå≤ Sistema de √Årboles")

local originalTreeCFrames = {}
local treesBrought = false

local function getAllSmallTrees()
    local trees = {}
    local function scan(folder)
        for _, obj in ipairs(folder:GetChildren()) do
            if obj:IsA("Model") and obj.Name == "Small Tree" then
                table.insert(trees, obj)
            end
        end
    end

    local map = workspace:FindFirstChild("Map")
    if map then
        if map:FindFirstChild("Foliage") then scan(map.Foliage) end
        if map:FindFirstChild("Landmarks") then scan(map.Landmarks) end
    end
    return trees
end

local function findTrunk(tree)
    for _, part in ipairs(tree:GetDescendants()) do
        if part:IsA("BasePart") and part.Name == "Trunk" then 
            return part 
        end
    end
    return nil
end

local function bringAllTrees()
    local char = player.Character
    if not char then return end
    local rootPart = char:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end
    
    local target = CFrame.new(rootPart.Position + rootPart.CFrame.LookVector * 10)
    local count = 0
    
    for _, tree in ipairs(getAllSmallTrees()) do
        local trunk = findTrunk(tree)
        if trunk then
            if not originalTreeCFrames[tree] then 
                originalTreeCFrames[tree] = trunk.CFrame 
            end
            
            pcall(function()
                tree.PrimaryPart = trunk
                trunk.Anchored = false
                trunk.CanCollide = false
                task.wait(0.01)
                tree:SetPrimaryPartCFrame(target + Vector3.new(math.random(-5,5), 0, math.random(-5,5)))
                trunk.Anchored = true
            end)
            count = count + 1
        end
    end
    
    treesBrought = true
    notify("√Årboles", string.format("Se trajeron %d √°rboles", count), 3)
end

local function restoreTrees()
    local count = 0
    for tree, cframe in pairs(originalTreeCFrames) do
        local trunk = findTrunk(tree)
        if trunk then
            pcall(function()
                tree.PrimaryPart = trunk
                tree:SetPrimaryPartCFrame(cframe)
                trunk.Anchored = true
                trunk.CanCollide = true
            end)
            count = count + 1
        end
    end
    originalTreeCFrames = {}
    treesBrought = false
    
    notify("√Årboles", string.format("Se restauraron %d √°rboles", count), 3)
end

AutoTab:CreateToggle({
    Name = "Traer Todos los √Årboles Peque√±os",
    CurrentValue = false,
    Callback = function(checked)
        if checked and not treesBrought then
            bringAllTrees()
        elseif not checked and treesBrought then
            restoreTrees()
        end
    end
})



-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- üë• TAB: JUGADORES
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

local PlayersTab = Window:CreateTab("üë• Jugadores")

PlayersTab:CreateSection("üéØ Gesti√≥n de Jugadores")

-- Variables para el sistema de jugadores
local selectedTargetPlayer = nil
local selectedItemForPlayer = nil
local selectedNPCBody = nil
local spectatingPlayer = nil
local spectateConnection = nil
local originalCamera = nil
local giveKillAuraEnabled = false
local giveKillAuraRadius = 200

-- Funci√≥n para obtener lista de jugadores (excluyendo al local player)
local function getPlayerList()
    local playerList = {}
    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= player then
            table.insert(playerList, plr.Name)
        end
    end
    table.sort(playerList)
    return #playerList > 0 and playerList or {"No hay jugadores"}
end

-- Funci√≥n para obtener lista de items (sin cofres)
local function getItemListNoChests()
    local itemsFolder = workspace:FindFirstChild("Items")
    if not itemsFolder then
        return {"No hay items"}
    end

    local itemNames = {}
    local uniqueItems = {}

    for _, item in ipairs(itemsFolder:GetChildren()) do
        local nameLower = item.Name:lower()
        -- Excluir cofres
        if not (nameLower:find("chest") or nameLower:find("cofre")) then
            if not uniqueItems[item.Name] then
                uniqueItems[item.Name] = true
                table.insert(itemNames, item.Name)
            end
        end
    end

    table.sort(itemNames)
    return #itemNames > 0 and itemNames or {"No hay items"}
end

-- üÜï Funci√≥n para obtener lista de NPCs con "Body" en el nombre
local function getNPCBodyList()
    local charactersFolder = workspace:FindFirstChild("Characters")
    if not charactersFolder then
        return {"No hay NPCs Body"}
    end

    local npcBodyList = {}
    local uniqueNPCs = {}

    for _, npc in ipairs(charactersFolder:GetChildren()) do
        if npc:IsA("Model") then
            local nameLower = npc.Name:lower()
            if nameLower:find("body") then
                if not uniqueNPCs[npc.Name] then
                    uniqueNPCs[npc.Name] = true
                    table.insert(npcBodyList, npc.Name)
                end
            end
        end
    end

    table.sort(npcBodyList)
    return #npcBodyList > 0 and npcBodyList or {"No hay NPCs Body"}
end

-- Funci√≥n para mover item hacia un jugador usando Remote Events
local function moveItemToPlayer(item, targetPlayer)
    if not item or not item:IsDescendantOf(workspace) then return false end
    if not targetPlayer or not targetPlayer.Character then return false end
    
    local targetRoot = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not targetRoot then return false end
    
    local part = item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart") or item:FindFirstChild("Handle")
    if not part then return false end

    if not item.PrimaryPart then
        pcall(function() item.PrimaryPart = part end)
    end

    local success = pcall(function()
        remoteEvents.RequestStartDraggingItem:FireServer(item)
        task.wait(0.05)
        item:SetPrimaryPartCFrame(CFrame.new(targetRoot.Position + Vector3.new(math.random(-3, 3), 5, math.random(-3, 3))))
        task.wait(0.05)
        remoteEvents.StopDraggingItem:FireServer(item)
    end)
    
    return success
end

-- üÜï Funci√≥n para mover NPC hacia un jugador usando Remote Events
local function moveNPCToPlayer(npc, targetPlayer)
    if not npc or not npc:IsDescendantOf(workspace) then return false end
    if not targetPlayer or not targetPlayer.Character then return false end
    
    local targetRoot = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not targetRoot then return false end
    
    -- Buscar la parte principal del NPC
    local npcPart = npc.PrimaryPart or npc:FindFirstChildWhichIsA("BasePart")
    if not npcPart then return false end

    -- Establecer PrimaryPart si no existe
    if not npc.PrimaryPart then
        pcall(function() npc.PrimaryPart = npcPart end)
    end

    local success = pcall(function()
        -- Usar el mismo sistema de Remote Events que los items
        remoteEvents.RequestStartDraggingItem:FireServer(npc)
        task.wait(0.05)
        npc:SetPrimaryPartCFrame(CFrame.new(targetRoot.Position + Vector3.new(math.random(-3, 3), 5, math.random(-3, 3))))
        task.wait(0.05)
        remoteEvents.StopDraggingItem:FireServer(npc)
    end)
    
    return success
end

-- Funci√≥n para detener espectador
local function stopSpectating()
    if spectateConnection then
        spectateConnection:Disconnect()
        spectateConnection = nil
    end
    
    local camera = workspace.CurrentCamera
    if camera and originalCamera then
        camera.CameraSubject = player.Character and player.Character:FindFirstChild("Humanoid") or player
        camera.CameraType = Enum.CameraType.Custom
    end
    
    spectatingPlayer = nil
end

-- Sistema de Kill Aura para darle a otros jugadores
local toolsDamageIDs = {
    ["Old Axe"] = "1_8982038982",
    ["Good Axe"] = "112_8982038982",
    ["Strong Axe"] = "116_8982038982",
    ["Chainsaw"] = "647_8992824875",
    ["Spear"] = "196_8999010016"
}

local function getAnyToolWithDamageID()
    local plr = player
    if not plr:FindFirstChild("Inventory") then return nil, nil end
    
    for toolName, damageID in pairs(toolsDamageIDs) do
        local tool = plr.Inventory:FindFirstChild(toolName)
        if tool then
            return tool, damageID
        end
    end
    return nil, nil
end

local function giveKillAuraLoop()
    while giveKillAuraEnabled do
        if not selectedTargetPlayer or not selectedTargetPlayer.Character then
            task.wait(0.5)
            continue
        end
        
        local targetChar = selectedTargetPlayer.Character
        local targetRoot = targetChar:FindFirstChild("HumanoidRootPart")
        
        if not targetRoot then 
            task.wait(0.5)
            continue
        end

        local tool, damageID = getAnyToolWithDamageID()
        if tool and damageID then
            local charactersFolder = workspace:FindFirstChild("Characters")
            if charactersFolder then
                for _, mob in ipairs(charactersFolder:GetChildren()) do
                    if mob:IsA("Model") then
                        local mobPart = mob:FindFirstChildWhichIsA("BasePart")
                        if mobPart then
                            local distanceFromTarget = (mobPart.Position - targetRoot.Position).Magnitude
                            
                            if distanceFromTarget <= giveKillAuraRadius then
                                pcall(function()
                                    remoteEvents.ToolDamageObject:InvokeServer(
                                        mob,
                                        tool,
                                        damageID,
                                        CFrame.new(mobPart.Position)
                                    )
                                end)
                            end
                        end
                    end
                end
            end
            task.wait(0.1)
        else
            task.wait(1)
        end
    end
end

PlayersTab:CreateParagraph({
    Title = "‚ÑπÔ∏è Informaci√≥n",
    Content = "Env√≠a items y NPCs a otros jugadores sin importar si est√°s muerto."
})

-- Dropdown de selecci√≥n de jugador
local PlayerDropdown = PlayersTab:CreateDropdown({
    Name = "üë§ Seleccionar Jugador",
    Options = getPlayerList(),
    Callback = function(selectedPlayer)
        if selectedPlayer == "No hay jugadores" then 
            selectedTargetPlayer = nil
            return 
        end
        
        local targetPlayer = Players:FindFirstChild(selectedPlayer)
        if targetPlayer then
            selectedTargetPlayer = targetPlayer
            notify("üë§ Jugador Seleccionado", selectedPlayer, 2)
        else
            selectedTargetPlayer = nil
            notify("‚ùå Error", "Jugador no encontrado", 2)
        end
    end
})

-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- üì¶ SECCI√ìN: ENVIAR ITEMS
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

PlayersTab:CreateSection("üì§ Enviar Items")

-- Dropdown de selecci√≥n de item (sin cofres)
local ItemForPlayerDropdown = PlayersTab:CreateDropdown({
    Name = "üì¶ Seleccionar Item",
    Options = getItemListNoChests(),
    Callback = function(selectedItem)
        if selectedItem == "No hay items" then 
            selectedItemForPlayer = nil
            return 
        end
        selectedItemForPlayer = selectedItem
        notify("üì¶ Item Seleccionado", selectedItem, 2)
    end
})

-- Bot√≥n para enviar UN item
PlayersTab:CreateButton({
    Name = "üì§ Enviar 1 Item al Jugador",
    Callback = function()
        if not selectedTargetPlayer then
            notify("‚ö†Ô∏è Aviso", "Selecciona un jugador primero", 2)
            return
        end
        
        if not selectedItemForPlayer then
            notify("‚ö†Ô∏è Aviso", "Selecciona un item primero", 2)
            return
        end
        
        if not selectedTargetPlayer.Character or not selectedTargetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            notify("‚ùå Error", "El jugador no tiene personaje v√°lido", 2)
            return
        end
        
        local itemsFolder = workspace:FindFirstChild("Items")
        if not itemsFolder then
            notify("‚ùå Error", "Carpeta 'Items' no encontrada", 2)
            return
        end
        
        for _, item in ipairs(itemsFolder:GetChildren()) do
            if item.Name == selectedItemForPlayer then
                local success = moveItemToPlayer(item, selectedTargetPlayer)
                if success then
                    notify("‚úÖ Item Enviado", 
                        string.format("'%s' ‚Üí %s", selectedItemForPlayer, selectedTargetPlayer.Name), 3)
                else
                    notify("‚ùå Error", "No se pudo enviar el item", 2)
                end
                return
            end
        end
        
        notify("‚ùå Error", "Item no encontrado", 2)
    end
})

-- Bot√≥n para enviar TODOS los items del mismo tipo
PlayersTab:CreateButton({
    Name = "üì¶ Enviar TODOS del Mismo Tipo",
    Callback = function()
        if not selectedTargetPlayer then
            notify("‚ö†Ô∏è Aviso", "Selecciona un jugador primero", 2)
            return
        end
        
        if not selectedItemForPlayer then
            notify("‚ö†Ô∏è Aviso", "Selecciona un item primero", 2)
            return
        end
        
        if not selectedTargetPlayer.Character or not selectedTargetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            notify("‚ùå Error", "El jugador no tiene personaje v√°lido", 2)
            return
        end
        
        local itemsFolder = workspace:FindFirstChild("Items")
        if not itemsFolder then
            notify("‚ùå Error", "Carpeta 'Items' no encontrada", 2)
            return
        end
        
        local itemsSent = 0
        local targetName = selectedItemForPlayer:lower()
        
        for _, item in ipairs(itemsFolder:GetChildren()) do
            if item.Name:lower() == targetName then
                local success = moveItemToPlayer(item, selectedTargetPlayer)
                if success then
                    itemsSent = itemsSent + 1
                    task.wait(0.1)
                end
            end
        end
        
        if itemsSent > 0 then
            notify("‚úÖ Items Enviados", 
                string.format("%d '%s' ‚Üí %s", itemsSent, selectedItemForPlayer, selectedTargetPlayer.Name), 3)
        else
            notify("‚ùå Error", "No se encontr√≥ ning√∫n " .. selectedItemForPlayer, 2)
        end
    end
})

-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- üëª SECCI√ìN: ENVIAR NPCs BODY (MUERTOS)
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

PlayersTab:CreateSection("üëª Enviar NPCs (Body)")

PlayersTab:CreateParagraph({
    Title = "üíÄ NPCs Muertos",
    Content = "Env√≠a cuerpos de NPCs (con 'Body' en el nombre) al jugador seleccionado."
})

-- Dropdown de selecci√≥n de NPC Body
local NPCBodyDropdown = PlayersTab:CreateDropdown({
    Name = "üíÄ Seleccionar NPC Body",
    Options = getNPCBodyList(),
    Callback = function(selectedNPC)
        if selectedNPC == "No hay NPCs Body" then 
            selectedNPCBody = nil
            return 
        end
        selectedNPCBody = selectedNPC
        notify("üíÄ NPC Body Seleccionado", selectedNPC, 2)
    end
})

-- Bot√≥n para enviar UN NPC Body
PlayersTab:CreateButton({
    Name = "üëª Enviar 1 NPC Body al Jugador",
    Callback = function()
        if not selectedTargetPlayer then
            notify("‚ö†Ô∏è Aviso", "Selecciona un jugador primero", 2)
            return
        end
        
        if not selectedNPCBody then
            notify("‚ö†Ô∏è Aviso", "Selecciona un NPC Body primero", 2)
            return
        end
        
        if not selectedTargetPlayer.Character or not selectedTargetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            notify("‚ùå Error", "El jugador no tiene personaje v√°lido", 2)
            return
        end
        
        local charactersFolder = workspace:FindFirstChild("Characters")
        if not charactersFolder then
            notify("‚ùå Error", "Carpeta 'Characters' no encontrada", 2)
            return
        end
        
        for _, npc in ipairs(charactersFolder:GetChildren()) do
            if npc.Name == selectedNPCBody then
                local success = moveNPCToPlayer(npc, selectedTargetPlayer)
                if success then
                    notify("‚úÖ NPC Enviado", 
                        string.format("'%s' ‚Üí %s", selectedNPCBody, selectedTargetPlayer.Name), 3)
                else
                    notify("‚ùå Error", "No se pudo enviar el NPC", 2)
                end
                return
            end
        end
        
        notify("‚ùå Error", "NPC Body no encontrado", 2)
    end
})

-- Bot√≥n para enviar TODOS los NPCs Body del mismo tipo
-- Bot√≥n para enviar TODOS los NPCs Body del mismo tipo al jugador seleccionado
PlayersTab:CreateButton({
    Name = "üíÄ Enviar TODOS los Body al Jugador",
    Callback = function()
        if not selectedTargetPlayer then
            notify("‚ö†Ô∏è Aviso", "Selecciona un jugador primero", 2)
            return
        end
        
        if not selectedTargetPlayer.Character or not selectedTargetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            notify("‚ùå Error", "El jugador no tiene personaje v√°lido", 2)
            return
        end
        
        local charactersFolder = workspace:FindFirstChild("Characters")
        if not charactersFolder then
            notify("‚ùå Error", "Carpeta 'Characters' no encontrada", 2)
            return
        end
        
        local npcsSent = 0
        
        -- Buscar TODOS los NPCs que tengan "Body" en el nombre
        for _, npc in ipairs(charactersFolder:GetChildren()) do
            local nameLower = npc.Name:lower()
            if nameLower:find("body") then
                local success = moveNPCToPlayer(npc, selectedTargetPlayer)
                if success then
                    npcsSent = npcsSent + 1
                    task.wait(0.1)
                end
            end
        end
        
        if npcsSent > 0 then
            notify("‚úÖ NPCs Body Enviados", 
                string.format("%d cuerpos ‚Üí %s", npcsSent, selectedTargetPlayer.Name), 3)
        else
            notify("‚ùå Error", "No se encontraron NPCs con 'Body' en el nombre", 2)
        end
    end
})

-- Bot√≥n para traer TODOS los NPCs Body a TI
PlayersTab:CreateButton({
    Name = "üéØ Traer TODOS los Body a M√≠",
    Callback = function()
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            notify("‚ùå Error", "Personaje no encontrado", 2)
            return
        end
        
        local root = character.HumanoidRootPart
        local charactersFolder = workspace:FindFirstChild("Characters")
        if not charactersFolder then
            notify("‚ùå Error", "Carpeta 'Characters' no encontrada", 2)
            return
        end
        
        local npcsBrought = 0
        
        -- Buscar TODOS los NPCs que tengan "Body" en el nombre
        for _, npc in ipairs(charactersFolder:GetChildren()) do
            local nameLower = npc.Name:lower()
            if nameLower:find("body") then
                local npcPart = npc.PrimaryPart or npc:FindFirstChildWhichIsA("BasePart")
                if npcPart then
                    -- Establecer PrimaryPart si no existe
                    if not npc.PrimaryPart then
                        pcall(function() npc.PrimaryPart = npcPart end)
                    end
                    
                    pcall(function()
                        remoteEvents.RequestStartDraggingItem:FireServer(npc)
                        task.wait(0.05)
                        npc:SetPrimaryPartCFrame(CFrame.new(root.Position + Vector3.new(math.random(-5,5), 5, math.random(-5,5))))
                        task.wait(0.05)
                        remoteEvents.StopDraggingItem:FireServer(npc)
                    end)
                    
                    npcsBrought = npcsBrought + 1
                    task.wait(0.1)
                end
            end
        end
        
        if npcsBrought > 0 then
            notify("‚úÖ NPCs Body Tra√≠dos", 
                string.format("Se trajeron %d cuerpos a ti", npcsBrought), 3)
        else
            notify("‚ùå Error", "No se encontraron NPCs con 'Body' en el nombre", 2)
        end
    end
})

-- Bot√≥n para traer solo los del TIPO seleccionado a ti
PlayersTab:CreateButton({
    Name = "üéØ Traer Solo del Tipo Seleccionado",
    Callback = function()
        if not selectedNPCBody then
            notify("‚ö†Ô∏è Aviso", "Selecciona un NPC Body primero", 2)
            return
        end
        
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            notify("‚ùå Error", "Personaje no encontrado", 2)
            return
        end
        
        local root = character.HumanoidRootPart
        local charactersFolder = workspace:FindFirstChild("Characters")
        if not charactersFolder then
            notify("‚ùå Error", "Carpeta 'Characters' no encontrada", 2)
            return
        end
        
        local npcsBrought = 0
        local targetName = selectedNPCBody:lower()
        
        for _, npc in ipairs(charactersFolder:GetChildren()) do
            if npc.Name:lower() == targetName then
                local npcPart = npc.PrimaryPart or npc:FindFirstChildWhichIsA("BasePart")
                if npcPart then
                    if not npc.PrimaryPart then
                        pcall(function() npc.PrimaryPart = npcPart end)
                    end
                    
                    pcall(function()
                        remoteEvents.RequestStartDraggingItem:FireServer(npc)
                        task.wait(0.05)
                        npc:SetPrimaryPartCFrame(CFrame.new(root.Position + Vector3.new(math.random(-5,5), 5, math.random(-5,5))))
                        task.wait(0.05)
                        remoteEvents.StopDraggingItem:FireServer(npc)
                    end)
                    
                    npcsBrought = npcsBrought + 1
                    task.wait(0.1)
                end
            end
        end
        
        if npcsBrought > 0 then
            notify("‚úÖ NPCs Tra√≠dos", 
                string.format("Se trajeron %d '%s' a ti", npcsBrought, selectedNPCBody), 3)
        else
            notify("‚ùå Error", "No se encontr√≥ ning√∫n " .. selectedNPCBody, 2)
        end
    end
})


-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- üëÅÔ∏è SECCI√ìN: ESPECTADOR
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

PlayersTab:CreateSection("üëÅÔ∏è Espectador")

PlayersTab:CreateToggle({
    Name = "üëÅÔ∏è Espectar Jugador Seleccionado",
    CurrentValue = false,
    Callback = function(state)
        if state then
            if not selectedTargetPlayer then
                notify("‚ö†Ô∏è Aviso", "Selecciona un jugador primero", 2)
                return
            end
            
            if not selectedTargetPlayer.Character or not selectedTargetPlayer.Character:FindFirstChild("Humanoid") then
                notify("‚ùå Error", "El jugador no tiene personaje v√°lido", 2)
                return
            end
            
            local camera = workspace.CurrentCamera
            if not originalCamera then
                originalCamera = camera.CameraSubject
            end
            
            spectatingPlayer = selectedTargetPlayer
            camera.CameraSubject = selectedTargetPlayer.Character.Humanoid
            
            spectateConnection = RunService.RenderStepped:Connect(function()
                if spectatingPlayer and spectatingPlayer.Character and spectatingPlayer.Character:FindFirstChild("Humanoid") then
                    camera.CameraSubject = spectatingPlayer.Character.Humanoid
                else
                    stopSpectating()
                    notify("‚ö†Ô∏è Aviso", "El jugador ya no est√° disponible", 2)
                end
            end)
            
            notify("üëÅÔ∏è Espectador Activado", "Espectando a: " .. selectedTargetPlayer.Name, 3)
        else
            stopSpectating()
            notify("üëÅÔ∏è Espectador Desactivado", "C√°mara restaurada", 2)
        end
    end
})

-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- üí° SECCI√ìN: CONSEJOS
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê


-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- üîÑ SISTEMA DE AUTO-ACTUALIZACI√ìN
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

local itemUpdatePending = false
local npcBodyUpdatePending = false

local function scheduleItemDropdownUpdate()
    if not itemUpdatePending then
        itemUpdatePending = true
        task.delay(1.5, function()
            local newItemList = getItemListNoChests()
            if ItemForPlayerDropdown and typeof(ItemForPlayerDropdown.UpdateOnClose) == "function" then
                pcall(function()
                    ItemForPlayerDropdown:UpdateOnClose(newItemList)
                end)
            end
            itemUpdatePending = false
        end)
    end
end

local function scheduleNPCBodyDropdownUpdate()
    if not npcBodyUpdatePending then
        npcBodyUpdatePending = true
        task.delay(1.5, function()
            local newNPCBodyList = getNPCBodyList()
            if NPCBodyDropdown and typeof(NPCBodyDropdown.UpdateOnClose) == "function" then
                pcall(function()
                    NPCBodyDropdown:UpdateOnClose(newNPCBodyList)
                end)
            end
            npcBodyUpdatePending = false
        end)
    end
end

-- Detectar cuando se a√±aden/eliminan items
if itemFolder then
    itemFolder.ChildAdded:Connect(function(item)
        scheduleItemDropdownUpdate()
    end)
    
    itemFolder.ChildRemoved:Connect(function(item)
        scheduleItemDropdownUpdate()
    end)
end

-- Detectar cuando se a√±aden/eliminan NPCs
if characterFolder then
    characterFolder.ChildAdded:Connect(function(npc)
        scheduleNPCBodyDropdownUpdate()
    end)
    
    characterFolder.ChildRemoved:Connect(function(npc)
        scheduleNPCBodyDropdownUpdate()
    end)
end

-- Actualizaci√≥n inicial
task.delay(1, function()
    scheduleItemDropdownUpdate()
    scheduleNPCBodyDropdownUpdate()
end)

-- Limpiar al cerrar/resetear
player.CharacterRemoving:Connect(function()
    if spectatingPlayer then
        stopSpectating()
    end
end)


-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- üëÅÔ∏è TAB: ESP
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

local ESPTab = Window:CreateTab("üëÅÔ∏è ESP")

ESPTab:CreateSection("üëÄ Sistema de ESP")

-- Item ESP con fuente personalizada
local customFont = Font.new("rbxassetid://16658246179", Enum.FontWeight.Regular, Enum.FontStyle.Normal)

local itemNames = {
    ["Revolver"] = true, ["Oil Barrel"] = true, ["Chainsaw"] = true, 
    ["Giant Sack"] = true, ["Bunny Foot"] = true, ["MedKit"] = true, 
    ["Alien Chest"] = true, ["Berry"] = true, ["Bolt"] = true, 
    ["Broken Fan"] = true, ["Carrot"] = true, ["Coal"] = true,
    ["Coin Stack"] = true, ["Hologram Emitter"] = true, 
    ["Item Chest"] = true, ["Laser Fence Blueprint"] = true, 
    ["Log"] = true, ["Old Flashlight"] = true, ["Old Radio"] = true, 
    ["Sheet Metal"] = true, ["Bandage"] = true, ["Rifle"] = true
}

local espConnections = {}

local function createItemESP(model)
    if not model:IsA("Model") or not itemNames[model.Name] then return end
    if not model.PrimaryPart or model:FindFirstChild("ESP") then return end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP"
    billboard.Size = UDim2.new(0, 100, 0, 30)
    billboard.Adornee = model.PrimaryPart
    billboard.AlwaysOnTop = true
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.TextSize = 17
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeTransparency = 0.5
    label.TextScaled = false
    label.FontFace = customFont
    label.Text = model.Name
    label.Parent = billboard

    billboard.Parent = model
end

local function removeAllItemESP()
    for _, model in ipairs(itemFolder:GetChildren()) do
        local esp = model:FindFirstChild("ESP")
        if esp then esp:Destroy() end
    end
end

ESPTab:CreateToggle({
    Name = "üì¶ ESP de Items",
    CurrentValue = false,
    Callback = function(state)
        if state then
            for _, model in ipairs(itemFolder:GetChildren()) do
                createItemESP(model)
            end

            local connection = itemFolder.ChildAdded:Connect(function(model)
                task.wait(0.1)
                if model:IsA("Model") and itemNames[model.Name] then
                    if not model.PrimaryPart then
                        model:GetPropertyChangedSignal("PrimaryPart"):Wait()
                    end
                    createItemESP(model)
                end
            end)
            table.insert(espConnections, connection)
            
            notify("Item ESP", "Item ESP activado", 2)
        else
            removeAllItemESP()
            for _, conn in ipairs(espConnections) do
                if conn.Connected then conn:Disconnect() end
            end
            espConnections = {}
            
            notify("Item ESP", "Item ESP desactivado", 2)
        end
    end
})

ESPTab:CreateToggle({
    Name = "üë• ESP de NPCs",
    CurrentValue = false,
    Callback = function(state)
        if state then
            local folder = workspace:FindFirstChild("Characters")
            if folder then
                for _, obj in pairs(folder:GetChildren()) do
                    createESP(obj, Color3.fromRGB(255, 100, 100), obj.Name)
                end
                notify("‚úÖ ESP NPCs", "Activado", 2)
            else
                notify("‚ùå Error", "Carpeta 'Characters' no encontrada", 2)
            end
        else
            local folder = workspace:FindFirstChild("Characters")
            if folder then
                for _, obj in pairs(folder:GetChildren()) do
                    removeESP(obj)
                end
            end
            notify("‚ùå ESP NPCs", "Desactivado", 2)
        end
    end
})

-- Player ESP y Chams
local BillboardESPs = {}
local ChamsESPs = {}
local ESPConnections = {}
local ESPEnabled = false
local ChamsEnabled = false

local function createBillboardESP(plr)
    if BillboardESPs[plr] or plr == player then return end
    if not plr.Character or not plr.Character:FindFirstChild("Head") then return end

    local gui = Instance.new("BillboardGui")
    gui.Name = "Billboard_ESP"
    gui.Adornee = plr.Character.Head
    gui.Parent = plr.Character.Head
    gui.Size = UDim2.new(0, 100, 0, 40)
    gui.AlwaysOnTop = true
    gui.StudsOffset = Vector3.new(0, 2, 0)

    local label = Instance.new("TextLabel", gui)
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeTransparency = 0.5
    label.TextScaled = true
    label.FontFace = customFont

    local conn = RunService.RenderStepped:Connect(function()
        if not plr.Character or not plr.Character:FindFirstChild("Humanoid") then
            gui:Destroy()
            conn:Disconnect()
            BillboardESPs[plr] = nil
            ESPConnections[plr] = nil
            return
        end

        local hp = math.floor(plr.Character.Humanoid.Health / plr.Character.Humanoid.MaxHealth * 100)
        label.Text = plr.Name .. " | " .. hp .. "%"
    end)

    BillboardESPs[plr] = gui
    ESPConnections[plr] = conn
end

local function createChamsESP(plr)
    if ChamsESPs[plr] or plr == player then return end
    if not plr.Character then return end

    local folder = Instance.new("Folder")
    folder.Name = "Chams_ESP"
    folder.Parent = CoreGui
    ChamsESPs[plr] = folder

    for _, part in pairs(plr.Character:GetChildren()) do
        if part:IsA("BasePart") then
            local box = Instance.new("BoxHandleAdornment")
            box.Name = "Cham_" .. plr.Name
            box.Adornee = part
            box.AlwaysOnTop = true
            box.ZIndex = 10
            box.Size = part.Size
            box.Transparency = 0.4
            box.Color = BrickColor.new("Bright green")
            box.Parent = folder
        end
    end
end

local function cleanupBillboardESP()
    for _, gui in pairs(BillboardESPs) do
        if gui then pcall(function() gui:Destroy() end) end
    end
    for _, conn in pairs(ESPConnections) do
        if conn and conn.Connected then pcall(function() conn:Disconnect() end) end
    end
    BillboardESPs = {}
    ESPConnections = {}
end

local function cleanupChamsESP()
    for _, folder in pairs(ChamsESPs) do
        if folder then pcall(function() folder:Destroy() end) end
    end
    ChamsESPs = {}
end

ESPTab:CreateToggle({
    Name = "üéÆ ESP (Nombres + HP)",
    CurrentValue = false,
    Callback = function(state)
        ESPEnabled = state
        if not state then
            cleanupBillboardESP()
        else
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= player then
                    createBillboardESP(plr)
                end
            end
        end
    end
})

ESPTab:CreateToggle({
    Name = "üì¶ Chams (Boxes)",
    CurrentValue = false,
    Callback = function(state)
        ChamsEnabled = state
        if not state then
            cleanupChamsESP()
        else
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= player then
                    createChamsESP(plr)
                end
            end
        end
    end
})

local function handlePlayerESP(plr)
    if plr == player then return end
    
    if ESPEnabled then createBillboardESP(plr) end
    if ChamsEnabled then createChamsESP(plr) end

    plr.CharacterAdded:Connect(function()
        task.wait(1)
        if ESPEnabled then createBillboardESP(plr) end
        if ChamsEnabled then createChamsESP(plr) end
    end)
end

for _, plr in pairs(Players:GetPlayers()) do
    handlePlayerESP(plr)
end

Players.PlayerAdded:Connect(handlePlayerESP)

ESPTab:CreateSection("üßπ Gesti√≥n de ESP")

ESPTab:CreateButton({
    Name = "üóëÔ∏è Limpiar Todo ESP",
    Callback = function()
        for obj, esp in pairs(espObjects) do
            if esp then
                esp:Destroy()
            end
        end
        espObjects = {}
        notify("‚úÖ ESP Limpiado", "Todo ESP removido", 2)
    end
})

-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- üé® TAB: VISUAL
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

local VisualsTab = Window:CreateTab("üé® Visual")

VisualsTab:CreateSection("üí° Efectos Visuales")

VisualsTab:CreateToggle({
    Name = "üí° Fullbright (Luz M√°xima)",
    CurrentValue = false,
    Callback = function(state)
        toggleFullbright(state)
    end
})

VisualsTab:CreateToggle({
    Name = "üß± Wallhack (Ver a trav√©s de paredes)",
    CurrentValue = false,
    Callback = function(state)
        toggleWallhack(state)
    end
})

VisualsTab:CreateSection("üå´Ô∏è Control de Niebla")

VisualsTab:CreateButton({
    Name = "üö´ Remover Niebla",
    Callback = function()
        Lighting.FogEnd = 100000
        Lighting.FogStart = 0
        notify("‚úÖ Niebla Removida", "Visibilidad m√°xima", 2)
    end
})

VisualsTab:CreateButton({
    Name = "üîÑ Restaurar Niebla",
    Callback = function()
        Lighting.FogEnd = 500
        Lighting.FogStart = 15
        notify("‚úÖ Niebla Restaurada", "Visibilidad normal", 2)
    end
})

VisualsTab:CreateSection("üé® Personalizaci√≥n")

VisualsTab:CreateColorPicker({
    Name = "üåà Color de Ambiente",
    Color = Lighting.Ambient,
    Callback = function(color)
        Lighting.Ambient = color
        notify("‚úÖ Color Aplicado", "Ambiente cambiado", 2)
    end
})

VisualsTab:CreateSlider({
    Name = "üïê Hora del D√≠a",
    Range = {0, 24},
    Increment = 1,
    Suffix = ":00",
    CurrentValue = Lighting.ClockTime,
    Callback = function(value)
        Lighting.ClockTime = value
    end
})

-- FOV CIRCLE
VisualsTab:CreateSection("üéØ FOV ")

local FOVCircle = Drawing.new("Circulo")
FOVCircle.Visible = false
FOVCircle.Color = Color3.fromRGB(255, 255, 255)
FOVCircle.Transparency = 1
FOVCircle.Thickness = 1
FOVCircle.Filled = false
FOVCircle.ZIndex = 2
local FOVRadius = 100

RunService.RenderStepped:Connect(function()
    if FOVCircle.Visible then
        FOVCircle.Radius = FOVRadius
        FOVCircle.Position = UserInputService:GetMouseLocation()
    end
end)

VisualsTab:CreateToggle({
    Name = "Mostrar FOV",
    CurrentValue = false,
    Callback = function(state)
        FOVCircle.Visible = state
    end
})

VisualsTab:CreateSlider({
    Name = "Radio del FOV",
    Range = {50, 360},
    Increment = 5,
    CurrentValue = 100,
    Suffix = "px",
    Callback = function(value)
        FOVRadius = value
    end
})

-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- üåç TAB: TELETRANSPORTE
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

local TeleportTab = Window:CreateTab("üåç Teleport")

TeleportTab:CreateSection("üìç Teletransporte")

TeleportTab:CreateInput({
    Name = "üë§ Teleport a Jugador",
    PlaceholderText = "Nombre o DisplayName (parcial)...",
    Callback = function(playerName)
        if not playerName or playerName == "" then
            notify("‚ö†Ô∏è Aviso", "Escribe parte del nombre o displayname", 2)
            return
        end

        local inputLower = playerName:lower()
        local targetPlayer = nil

        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= player then
                local nameLower = plr.Name:lower()
                local displayLower = plr.DisplayName:lower()
                if nameLower:find(inputLower) or displayLower:find(inputLower) then
                    targetPlayer = plr
                    break
                end
            end
        end

        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
                notify("‚úÖ Teletransporte", "A: " .. targetPlayer.DisplayName .. " (" .. targetPlayer.Name .. ")", 3)
            end
        else
            notify("‚ùå Error", "Jugador no encontrado: " .. playerName, 2)
        end
    end
})

TeleportTab:CreateSection("üó∫Ô∏è Ubicaciones del Juego")

local storyCoords = {
    { name = "Campsite", coord = "0, 8, 0"},
    { name = "Safe Zone", coord = "0, 110, 0" }
}

for _, entry in ipairs(storyCoords) do
    TeleportTab:CreateButton({
        Name = "TP: " .. entry.name,
        Callback = function()
            local cf = stringToCFrame(entry.coord)
            if cf then
                teleportToTarget(cf, 0.1)
                notify("Teleport", "Teletransportado a " .. entry.name, 2)
            end
        end
    })
end

TeleportTab:CreateInput({
    Name = "üì¶ Teleport a Item",
    PlaceholderText = "Nombre del item...",
    Callback = function(itemName)
        if not itemName or itemName == "" then return end
        
        local itemsFolder = workspace:FindFirstChild("Items")
        if not itemsFolder then
            notify("‚ùå Error", "Carpeta 'Items' no encontrada", 2)
            return
        end
        
        local targetName = itemName:lower()
        for _, item in ipairs(itemsFolder:GetChildren()) do
            if item.Name:lower():find(targetName) then
                teleportToItem(item)
                return
            end
        end
        
        notify("‚ùå Error", "Item no encontrado: " .. itemName, 2)
    end
})

TeleportTab:CreateSection("üéØ Lista de Jugadores")

TeleportTab:CreateDropdown({
    Name = "üìã Seleccionar Jugador",
    Options = (function()
        local playerList = {}
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= player then
                table.insert(playerList, plr.Name)
            end
        end
        return #playerList > 0 and playerList or {"No hay jugadores"}
    end)(),
    Callback = function(selectedPlayer)
        if selectedPlayer == "No hay jugadores" then return end
        
        local targetPlayer = Players:FindFirstChild(selectedPlayer)
        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
                notify("‚úÖ Teletransporte", "A: " .. targetPlayer.Name, 2)
            end
        end
    end
})

-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- ‚öôÔ∏è TAB: CONFIGURACI√ìN
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

local SettingsTab = Window:CreateTab("‚öôÔ∏è Config")

SettingsTab:CreateSection("üé® Temas de la Interfaz")

SettingsTab:CreateButton({
    Name = "üé≤ Tema Aleatorio",
    Callback = function()
        local themes = {"red", "green", "blue", "purple", "neon", "neon_blue", "neon_pink", "oscuro neon"}
        local randomTheme = themes[math.random(1, #themes)]
        Window:SetTheme(randomTheme)
        notify("‚úÖ Tema Aleatorio", "Aplicado: " .. randomTheme, 3)
    end
})

SettingsTab:CreateSection("‚å®Ô∏è Configuraci√≥n de Teclas")

SettingsTab:CreateParagraph({
    Title = "üéÆ Keybinds Globales",
    Content = "F2: Collect | F3: Noclip | F4: Fly\nF5: InfJump | F6: Fullbright\nF7: Auto-Farm | F8: Anti-AFK"
})

SettingsTab:CreateKeybind({
    Name = "üéÆ Hotkey Toggle Fly",
    CurrentKeybind = "F4",
    Callback = function(key)
        flyEnabled = not flyEnabled
        toggleFly(flyEnabled)
    end
})

SettingsTab:CreateKeybind({
    Name = "üö∂ Hotkey Toggle Noclip",
    CurrentKeybind = "F3",
    Callback = function(key)
        noclipEnabled = not noclipEnabled
        toggleNoclip(noclipEnabled)
    end
})

SettingsTab:CreateSection("‚ÑπÔ∏è Informaci√≥n del Script")

SettingsTab:CreateParagraph({
    Title = "üìä Estad√≠sticas del Jugador",
    Content = string.format(
        "üéÆ Jugador: %s\n" ..
        "üÜî UserID: %d\n" ..
        "üìÖ Cuenta creada: hace %d d√≠as\n" ..
        "üéØ Juego: 99 Noches en el Bosque",
        player.Name,
        player.UserId,
        player.AccountAge
    )
})

SettingsTab:CreateSection("üì± Enlaces y Redes")

SettingsTab:CreateButton({
    Name = "üé• YouTube - joao_mods",
    Callback = function()
        if setclipboard then
            setclipboard("https://youtube.com/@joao_mods0")
        end
        notify("üì∫ YouTube", "Enlace copiado al portapapeles. ¬°Suscr√≠bete!", 4)
    end
})



SettingsTab:CreateSection("üõ†Ô∏è Herramientas Adicionales")

SettingsTab:CreateButton({
    Name = "üóëÔ∏è Limpiar Todas las Conexiones",
    Callback = function()
        for name, connection in pairs(connections) do
            if typeof(connection) == "RBXScriptConnection" then
                pcall(function() connection:Disconnect() end)
            elseif typeof(connection) == "thread" then
                pcall(function() task.cancel(connection) end)
            end
        end
        connections = {}
        
        noclipEnabled = false
        autoFarmEnabled = false
        flyEnabled = false
        infiniteJumpEnabled = false
        antiAFKEnabled = false
        fullbrightEnabled = false
        wallHackEnabled = false
        autoClickEnabled = false
        killAuraEnabled = false
        
        notify("‚úÖ Limpieza", "Todas las funciones desactivadas", 3)
    end
})
